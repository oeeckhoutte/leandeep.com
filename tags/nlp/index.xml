<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NLP on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/nlp/</link>
    <description>Recent content in NLP on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 03 Sep 2019 07:48:00 +0000</lastBuildDate><atom:link href="https://leandeep.com/tags/nlp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[NLP] 2 manières de générer des N-grams en Python </title>
      <link>https://leandeep.com/nlp-2-mani%C3%A8res-de-g%C3%A9n%C3%A9rer-des-n-grams-en-python/</link>
      <pubDate>Tue, 03 Sep 2019 07:48:00 +0000</pubDate>
      
      <guid>https://leandeep.com/nlp-2-mani%C3%A8res-de-g%C3%A9n%C3%A9rer-des-n-grams-en-python/</guid>
      <description>Introduction Dans une phrase, les N-grams sont des séquences de N-mots adjacents. N peut être 1 ou 2 ou toute autre entier positif. En général N n&amp;rsquo;est pas très grand car ces N-grams apparaissent rarement plusieurs fois.
On utilise ces N-grams en Machine Learning dans les sujets qui traitent du Natural Language Processing. Plus précisément, on les retrouve dans les sujets de classification de textes. On peut utiliser des bi-grams ou tri-grams comme features pour représenter nos documents en plus d&amp;rsquo;utiliser des tokens individuels trouvés dans le corpus.</description>
    </item>
    
  </channel>
</rss>
