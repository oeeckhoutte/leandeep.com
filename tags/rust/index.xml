<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/rust/</link>
    <description>Recent content in Rust on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 23 Oct 2022 07:49:00 +0200</lastBuildDate><atom:link href="https://leandeep.com/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust pour d√©veloppeurs Python</title>
      <link>https://leandeep.com/rust-pour-d%C3%A9veloppeurs-python/</link>
      <pubDate>Sun, 23 Oct 2022 07:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/rust-pour-d%C3%A9veloppeurs-python/</guid>
      <description>Petit guide rapide pour les Pythonistas souhaitant devenir Rustaceans.
Python 1. Conventions et guidelines PEP8 2. Tooling requirements.txt setup.py PyPI pip setuptools &amp; poetry pour distribuer des libs pipenv pour la gestion des d√©pendances twine pour uploader un package venv pour isoler un env pyenv pour g√©rer ‚â† versions de Python pydoc &amp; Sphinx pour g√©n√©rer la doc Python pour interpr√©ter/ compiler ipython comme REPL ipdb pour debugguer 3. Librairies et frameworks urllib requests json pyYAML csv datetime &amp; dateutils click &amp; argparse docopt re subprocess multiprocessing logging pathlib pickle heapq flask cryptography pymongo jinja2 pyside pytest Flake8 Black itertools celery boto 4.</description>
    </item>
    
    <item>
      <title>Proxies HTTP et SOCKS via gcloud</title>
      <link>https://leandeep.com/proxies-http-et-socks-via-gcloud/</link>
      <pubDate>Fri, 23 Sep 2022 09:22:00 +0000</pubDate>
      
      <guid>https://leandeep.com/proxies-http-et-socks-via-gcloud/</guid>
      <description>Introduction Dans cet article tr√®s rapide nous allons voir comment cr√©er une proxy SOCKS ou HTTP via une instance Google Cloud. On va juste utiliser le cli gcloud et un binaire open source.
Lancement du proxy Socks R√©cup√©rer l&amp;rsquo;ID de son instance ./gcloud compute instances list
cd PATH_TO_GCLOUD_SI_PAS_DANS_$PATH export PORT_DU_PROXY= ./gcloud compute ssh NOM_DE_VOTRE_INSTANCE --project NOM_DE_VOTRE_PROJET --zone LA_ZONE_QUI_CONTIENT_VOTRE_INSTANCE --ssh-flag=&amp;#34;-D&amp;#34; --ssh-flag=&amp;#34;$PORT_DU_PROXY&amp;#34; --ssh-flag=&amp;#34;-N&amp;#34; V√©rification curl --socks5 127.0.0.1:$PORT_DU_PROXY https://ipinfo.io/ip
Besoin d&amp;rsquo;un proxy http ?</description>
    </item>
    
    <item>
      <title>Aide m√©moire types Rust</title>
      <link>https://leandeep.com/aide-m%C3%A9moire-types-rust/</link>
      <pubDate>Fri, 28 Jan 2022 07:00:00 +0200</pubDate>
      
      <guid>https://leandeep.com/aide-m%C3%A9moire-types-rust/</guid>
      <description>Literals Le type d&amp;rsquo;une variable peut √™tre d√©fini en ajoutant un suffixe derri√®re la valeur de la variable. Par exemple:
let mon_test1: i32 = 12; Equivaut √† let mon_test2 = 12i32; Equivaut √† let mon_test3 = 12_i32; Retourner la taille d&amp;rsquo;une variable:
println!(&amp;#34;Taille de `mon_test1` in bytes: {}&amp;#34;, std::mem::size_of_val(&amp;amp;mon_test1)); Taille de `mon_test1` in bytes: 4 // i32 -&amp;gt; 4 x 8 Casting Il n&amp;rsquo;y a pas de coercion, c&amp;rsquo;est-√†-dire de la conversion implicite, entre les types primitifs en Rust.</description>
    </item>
    
    <item>
      <title>Aide m√©moire pour printer en Rust</title>
      <link>https://leandeep.com/aide-m%C3%A9moire-pour-printer-en-rust/</link>
      <pubDate>Sun, 16 Jan 2022 07:00:00 +0200</pubDate>
      
      <guid>https://leandeep.com/aide-m%C3%A9moire-pour-printer-en-rust/</guid>
      <description>Le print simple/ courant
println!(&amp;#34;{}, l&amp;#39;origine&amp;#34;, 42); Print avec des arguments positionnels
println!(&amp;#34;Hi {0}, I am {1}. Hi {1}, I am {0}&amp;#34;, &amp;#34;John&amp;#34;, &amp;#34;Peter&amp;#34;); Print avec des arguments nomm√©s
println!(&amp;#34;{argument1} {argument2} {argument3}&amp;#34;, argument2=&amp;#34;fifi&amp;#34;, argument1=&amp;#34;riri&amp;#34;, argument3=&amp;#34;loulou&amp;#34; ); Printer en alignant la variable √† afficher √† droite
println!(&amp;#34;{ma_variable:&amp;gt;width$}&amp;#34;, ma_variable=&amp;#34;toto&amp;#34;, width=10); Printer en alignant √† droite et en pr√©fixant avec des z√©ros
println!(&amp;#34;{nombre:0&amp;gt;width$}&amp;#34;, nombre=100, width=6); Printer avec une conversion automatique en binaire
println!(&amp;#34;{} en binaire s&amp;#39;√©crit {:b}&amp;#34;, 4, 4); Printer une structure</description>
    </item>
    
    <item>
      <title>Aide m√©moire primitives Rust</title>
      <link>https://leandeep.com/aide-m%C3%A9moire-primitives-rust/</link>
      <pubDate>Tue, 11 Jan 2022 07:00:00 +0200</pubDate>
      
      <guid>https://leandeep.com/aide-m%C3%A9moire-primitives-rust/</guid>
      <description>Annoter le type des variables
let is_rust_cool: bool = true; // let mon_float: f64 = 5.0; // Annotation simple // let mon_integer = 5i32; // Annotation via suffixe // Ou inf√©rence de type: let mon_autre_float = 5.0; // f64 let mon_autre_integer = 5; // i32 Le type de variable ne peut pas √™tre chang√©
Tableau de taille fixe et type connu
let petit_tableau: [i8; 5] = [1, 2, 3, 4, 5]; Tableau de taille fixe, type connu et initialis√© √† 0</description>
    </item>
    
    <item>
      <title>Installer un REPL Rust et jouer avec les types et slices</title>
      <link>https://leandeep.com/installer-un-repl-rust-et-jouer-avec-les-types-et-slices/</link>
      <pubDate>Fri, 31 Dec 2021 06:34:00 +0000</pubDate>
      
      <guid>https://leandeep.com/installer-un-repl-rust-et-jouer-avec-les-types-et-slices/</guid>
      <description>Introduction Dans cet article, nous allons voir comment installer le REPL evcxr pour Rust d√©velopp√© par Google. Ce genre d&amp;rsquo;outil est tr√®s utile lorsque vous apprenez un langage (ou m√™me quand vous √™tes exp√©riment√© et que vous voulez v√©rifier quelque chose). Avec evcxr, il n&amp;rsquo;est pas n√©cessaire de recompiler son programme Rust √† chaque nouvelle commande ex√©cut√©e. Ce REPL le fait tout seul; un gros gain de temps.
Installation rustup component add rust-src cargo install evcxr_repl D√©marrage Lien vers la documentation</description>
    </item>
    
    <item>
      <title>Tips en vrac sur Rust</title>
      <link>https://leandeep.com/tips-en-vrac-sur-rust/</link>
      <pubDate>Fri, 31 Dec 2021 06:34:00 +0000</pubDate>
      
      <guid>https://leandeep.com/tips-en-vrac-sur-rust/</guid>
      <description>Voir les &amp;ldquo;choses&amp;rdquo; charg√©es par d√©faut lors du d√©marrage d&amp;rsquo;un programme Rust
&amp;ldquo;The prelude is the list of things that Rust automatically imports into every Rust program.&amp;rdquo; Source
https://doc.rust-lang.org/std/prelude/v1/index.html
Some()
Some est une variante de l&amp;rsquo;enum Option.
enum Option&amp;lt;T&amp;gt; { None, Some(T), } Si on veut parler d&amp;rsquo;une variable qui existe, on utilise Some(value). (Par contre, si on veut parler d&amp;rsquo;une variable qui pourrait ne pas exister, on utilise plut√¥t Option&amp;lt;IciAnyType&amp;gt;)</description>
    </item>
    
    <item>
      <title>Installer Rust sur Debian</title>
      <link>https://leandeep.com/installer-rust-sur-debian/</link>
      <pubDate>Mon, 24 May 2021 15:20:00 +0000</pubDate>
      
      <guid>https://leandeep.com/installer-rust-sur-debian/</guid>
      <description>Provisioning d&amp;rsquo;une instance Debian docker run -it -v $PWD:/home debian:latest bash Installation de Rust apt update apt install curl vim git -y curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh apt install gcc gcc-multilib source $HOME/.cargo/env find /usr -iname &amp;#34;crti.o&amp;#34; -print export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH # dans ~/.zshrc find /usr -iname &amp;#34;Scrt1.o&amp;#34; -print # /usr/lib/x86_64-linux-gnu/Scrt1.o -&amp;gt; No export necessary else add the dir containing Scrt1.o apt-get install libclang-dev find /usr -iname &amp;#34;libclang.so&amp;#34; -print export LIBCLANG_PATH=&amp;#34;/usr/lib/llvm-11/lib/libclang.</description>
    </item>
    
    <item>
      <title>Premier programme en Rust</title>
      <link>https://leandeep.com/premier-programme-en-rust/</link>
      <pubDate>Thu, 13 May 2021 18:20:00 +0000</pubDate>
      
      <guid>https://leandeep.com/premier-programme-en-rust/</guid>
      <description>J&amp;rsquo;ai voulu cr√©er un premier programme en Rust; sans avoir jamais suivi de tutoriel ou de formation. Suite √† cette premi√®re exp√©rience, je pense que c&amp;rsquo;est tr√®s compliqu√© de coder quelque chose de propre et de comprendre ce que l&amp;rsquo;on fait sans lire un livre sur le sujet.
J&amp;rsquo;ai donc craqu√© et me suis pr√©vu un peu de lecture pour ce mois ci üòú&amp;hellip;
Premier hello world Cr√©er un fichier main.</description>
    </item>
    
    <item>
      <title>Rust to Webassembly</title>
      <link>https://leandeep.com/rust-to-webassembly/</link>
      <pubDate>Sun, 22 Dec 2019 18:28:03 +0000</pubDate>
      
      <guid>https://leandeep.com/rust-to-webassembly/</guid>
      <description>Introduction L&amp;rsquo;objectif de cet article est de voir comment compiler un tout petit programme en Rust et de l&amp;rsquo;appeler soit dans un navigateur, soit dans un programme NodeJS ou soit dans un programme Python.
Installation Installer rustup
Rustup is an installer for the systems programming language Rust
curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh source $HOME/.cargo/env Installer wasm-pack
curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh Cr√©ation d&amp;rsquo;une librairie Rust cargo new --lib days-count Remplacer le contenu du fichier days-count/src/lib.</description>
    </item>
    
  </channel>
</rss>
