<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/python/</link>
    <description>Recent content in Python on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 19 Jul 2025 11:36:00 +0200</lastBuildDate><atom:link href="https://leandeep.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fine-tune Yolo pour détecter un feu</title>
      <link>https://leandeep.com/fine-tune-yolo-pour-d%C3%A9tecter-un-feu/</link>
      <pubDate>Sat, 19 Jul 2025 11:36:00 +0200</pubDate>
      
      <guid>https://leandeep.com/fine-tune-yolo-pour-d%C3%A9tecter-un-feu/</guid>
      <description>On crée un jupyter notebook:
mkdir yolo-finetune-fire &amp;amp;&amp;amp; cd $_ touch yolo-finetune.ipynb Contenu du Notebook
MY_SECRET_KEY=&amp;#34;...&amp;#34; !pip install ultralytics !pip install roboflow import os import yaml import ultralytics import pandas as pd from roboflow import Roboflow from ultralytics import YOLO from IPython.display import Image, display Contenu Markdown
yolov11s.pt vs yolov11n.pt
Le &amp;ldquo;s&amp;rdquo; signifie &amp;ldquo;small&amp;rdquo; (petit). Modèle plus grand que &amp;ldquo;n&amp;rdquo;, avec plus de couches et de paramètres. Meilleure précision, mais plus lent et plus gourmand en ressources que &amp;ldquo;n&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Installer Jupyter lab sur Ubuntu 22</title>
      <link>https://leandeep.com/installer-jupyter-lab-sur-ubuntu-22/</link>
      <pubDate>Sat, 19 Jul 2025 10:59:00 +0200</pubDate>
      
      <guid>https://leandeep.com/installer-jupyter-lab-sur-ubuntu-22/</guid>
      <description>Dans cet article très court, nous allons voir comment installer Jupyter lab sur Ubuntu 22.
Attention cette installation n&#39;est pas sécurisée. C&#39;est de l&#39;ultra temporaire à ne surtout pas utiliser en entreprise et encore moins avec des données de prod.
Pré-requis miniconda3-3.11-23.5.0-3 nvidia-smi pour vérifier que vous avez accès à un GPU Installation pip install notebook jupyterlab jupyter Configuration jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root Et voilà, rendez-vous sur http://VOTRE_SERVER:8888/lab?token=MOT_DE_PASSE pour accéder à Jupyter lab.</description>
    </item>
    
    <item>
      <title>Installer direnv sur Ubuntu 22</title>
      <link>https://leandeep.com/installer-direnv-sur-ubuntu-22/</link>
      <pubDate>Sat, 19 Jul 2025 10:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/installer-direnv-sur-ubuntu-22/</guid>
      <description>Dans cet article très court, nous allons voir comment installer direnv sur Ubuntu 22.
Installation sudo apt install direnv curl https://pyenv.run | bash Configuration Ajouter les lignes suivantes dans votre .zshrc
export PYENV_ROOT=&amp;#34;$HOME/.pyenv&amp;#34; export PATH=&amp;#34;$PYENV_ROOT/bin:$PATH&amp;#34; eval &amp;#34;$(pyenv init --path)&amp;#34; eval &amp;#34;$(pyenv init -)&amp;#34; eval &amp;#34;$(direnv hook zsh)&amp;#34; Exécuter soure ~/.zshrc puis installer un package python de votre choix.
pyenv install 3.11.8 pyenv global 3.11.8 # Ou pyenv install miniconda3-3.11-23.5.0-3 pyenv global miniconda3-3.</description>
    </item>
    
    <item>
      <title>Access Raspberry Pi Camera using Python and OpenCV</title>
      <link>https://leandeep.com/access-raspberry-pi-camera-using-python-and-opencv/</link>
      <pubDate>Mon, 28 Apr 2025 21:55:00 +0200</pubDate>
      
      <guid>https://leandeep.com/access-raspberry-pi-camera-using-python-and-opencv/</guid>
      <description>In this article we are going to see how to install OpenCV on a Raspberry PI using Bookworm.
Prerequisites Install dependencies on Raspberry Pi
sudo apt update sudo apt install python3-picamera2 sudo apt install libcamera-apps sudo apt install python3-opencv Install dependencies on Macbook
pip install opencv-python numpy Code import cv2 import numpy as np import time from datetime import datetime import os # ========================== # CONSTANTS (Configuration) # ========================== BLUR_SIZE = (7, 7) # Larger → less sensitive (e.</description>
    </item>
    
    <item>
      <title>H-Bridge L298N with Raspberry Pi and Python</title>
      <link>https://leandeep.com/h-bridge-l298n-with-raspberry-pi-and-python/</link>
      <pubDate>Mon, 28 Apr 2025 21:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/h-bridge-l298n-with-raspberry-pi-and-python/</guid>
      <description>In the article we are going to see how to control a H-bridge L298N connected to a Raspberry Pi using Python.
Prerequisites Connect the bridge L298N to the raspberry pi
Connect the pin IN1 of the L298N to GPIO7 (pin 26) of the Raspberry Pi (so GPIO4). Connect the pin IN2 of the L298N to GPIO8 (pin 24) of the Raspberry Pi. Connect the pin ENA of the L298N to GPIO25 (pin 22) of the Raspberry Pi.</description>
    </item>
    
    <item>
      <title>Surveiller et redémarrer un script Python dès qu&#39;un fichier est modifié</title>
      <link>https://leandeep.com/surveiller-et-red%C3%A9marrer-un-script-python-d%C3%A8s-quun-fichier-est-modifi%C3%A9/</link>
      <pubDate>Sat, 11 Jan 2025 23:32:00 +0200</pubDate>
      
      <guid>https://leandeep.com/surveiller-et-red%C3%A9marrer-un-script-python-d%C3%A8s-quun-fichier-est-modifi%C3%A9/</guid>
      <description>On peut utiliser watchdog pour surveiller les modifications des fichiers et relancer automatiquement un module/script lorsque des modifications sont détectées. Voici un exemple complet:
Pré-requis pip install watchdog
Créer un script de surveillance Tracker un fichier.py
Créer par exemple un fichier appelé run_and_reload.py
import time import os import sys import argparse from watchdog.observers import Observer from watchdog.events import FileSystemEventHandler class TargetFileHandler(FileSystemEventHandler): def __init__(self, target_file): self.target_file = os.path.abspath(target_file) def on_modified(self, event): if os.</description>
    </item>
    
    <item>
      <title>Simuler un mode offline pour certains tests Pytest</title>
      <link>https://leandeep.com/simuler-un-mode-offline-pour-certains-tests-pytest/</link>
      <pubDate>Tue, 10 Dec 2024 23:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/simuler-un-mode-offline-pour-certains-tests-pytest/</guid>
      <description>Pour certains, cet article peut sembler inutile car ils vous diront qu&amp;rsquo;il suffit de couper le wifi sur son laptop pour ne plus avoir internet. Ce n&amp;rsquo;est pas faux, mais parfois et sans rentrer dans le détail, il n&amp;rsquo;est pas toujours possible de travailler offline pendant des heures.
Voici donc un tip pour simuler dans des tests unitaires la déconnexion d&amp;rsquo;internet. Il suffit de créer la fixture pytest suivante et de l&amp;rsquo;appeler dans vos tests.</description>
    </item>
    
    <item>
      <title>Backtester ses stratégies de trading avec Backtrader</title>
      <link>https://leandeep.com/backtester-ses-strat%C3%A9gies-de-trading-avec-backtrader/</link>
      <pubDate>Fri, 02 Feb 2024 18:10:00 +0000</pubDate>
      
      <guid>https://leandeep.com/backtester-ses-strat%C3%A9gies-de-trading-avec-backtrader/</guid>
      <description>Voici un exemple de code Python permettant de backtester une stratégie (ici j&amp;rsquo;en ai créé une complètement inutile mais cela permet d&amp;rsquo;illustrer mon propose).
Pré-requis
pip install Pyarrow==15.0.0 pandas==2.2.0 backtrader==1.9.78.123 matplotlib==3.8.2 import math import pandas as pd import backtrader as bt import ccxt # Charger les données historiques depuis Binance exchange = ccxt.binance( { &amp;#34;apiKey&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;secret&amp;#34;: &amp;#34;&amp;#34;, } ) symbol = &amp;#34;ETH/USDT&amp;#34; timeframe = &amp;#34;1h&amp;#34; ohlcv = exchange.fetch_ohlcv(symbol, timeframe) df = pd.</description>
    </item>
    
    <item>
      <title>Setup local development environments with direnv and poetry</title>
      <link>https://leandeep.com/setup-local-development-environments-with-direnv-and-poetry/</link>
      <pubDate>Tue, 02 Jan 2024 23:43:00 +0000</pubDate>
      
      <guid>https://leandeep.com/setup-local-development-environments-with-direnv-and-poetry/</guid>
      <description>In this short article we are going to configure direnv to be able to use poetry smoothly.
Poetry installation Option 1 brew install pipx pipx ensurepath pipx install poetry Option 2 (The option I prefer) If you have pyenv and zsh:
Select the Python version you want to use:
# for example pyenv global 3.11.2 Then add the following line in your ~/.zshrc file:
eval &amp;#34;$(pyenv init --path)&amp;#34; Finally install poetry with a simple pip install poetry</description>
    </item>
    
    <item>
      <title>Utiliser une IP fixe dans son terminal via proxy socks</title>
      <link>https://leandeep.com/utiliser-une-ip-fixe-dans-son-terminal-via-proxy-socks/</link>
      <pubDate>Tue, 05 Sep 2023 23:46:00 +0200</pubDate>
      
      <guid>https://leandeep.com/utiliser-une-ip-fixe-dans-son-terminal-via-proxy-socks/</guid>
      <description>Voici un tip pour utiliser une IP fixe depuis son terminal quand son FAI ne fournit pas d&amp;rsquo;adresse IP statique. C&amp;rsquo;est le cas par exemple avec Starlink, SFR ou Orange&amp;hellip;
Pour ce faire, il suffit d&amp;rsquo;utiliser un proxy socks. Si vous avez une VM sur le cloud accessible directement via SSH, vous pouvez utiliser les commandes suivantes:
Dans un premier onglet de votre terminal exécuter la commande suivante:
ssh -D 6006 -q -C -N user@ip_or_reverse_dns Puis dans un second onglet:</description>
    </item>
    
  </channel>
</rss>
