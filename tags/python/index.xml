<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/python/</link>
    <description>Recent content in Python on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 21 Aug 2023 23:49:00 +0200</lastBuildDate><atom:link href="https://leandeep.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fixer l&#39;erreur &#39;ModuleNotFoundError: No module named _lzma&#39; sur OSX</title>
      <link>https://leandeep.com/fixer-lerreur-modulenotfounderror-no-module-named-_lzma-sur-osx/</link>
      <pubDate>Mon, 21 Aug 2023 23:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/fixer-lerreur-modulenotfounderror-no-module-named-_lzma-sur-osx/</guid>
      <description>Voici un tip pour fixer l&amp;rsquo;erreur ennuyeuse ModuleNotFoundError: No module named &#39;_lzma&#39; sur OSX lorsqu&amp;rsquo;on utilise torch et pyenv.
Installer les packages suivants:
brew install zlib brew install sqlite brew install bzip2 brew install libiconv brew install libzip Ouvrir le fichier ~/.zshrc et ajouter les lignes suivantes:
export LDFLAGS=&amp;#34;${LDFLAGS} -L/usr/local/opt/zlib/lib&amp;#34; export CPPFLAGS=&amp;#34;${CPPFLAGS} -I/usr/local/opt/zlib/include&amp;#34; export LDFLAGS=&amp;#34;${LDFLAGS} -L/usr/local/opt/sqlite/lib&amp;#34; export CPPFLAGS=&amp;#34;${CPPFLAGS} -I/usr/local/opt/sqlite/include&amp;#34; export PKG_CONFIG_PATH=&amp;#34;${PKG_CONFIG_PATH} /usr/local/opt/zlib/lib/pkgconfig&amp;#34; export PKG_CONFIG_PATH=&amp;#34;${PKG_CONFIG_PATH} /usr/local/opt/sqlite/lib/pkgconfig&amp;#34; Installer une nouvelle version de Python via pyenv.</description>
    </item>
    
    <item>
      <title>direnv avec pyenv et anaconda</title>
      <link>https://leandeep.com/direnv-avec-pyenv-et-anaconda/</link>
      <pubDate>Mon, 21 Aug 2023 21:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/direnv-avec-pyenv-et-anaconda/</guid>
      <description>Dans cet article nous allons voir comment installer Anaconda3 sur OSX et l&amp;rsquo;utiliser directement dans direnv.
Pré-requis direnv installé Installation On commence par installer Anaconda via brew
brew install --cask anaconda On édite ~/.zshrc et on ajoute le path vers les binaires d&amp;rsquo;Anaconda.
export PATH=&amp;#34;/opt/homebrew/anaconda3/bin:$PATH&amp;#34; Nouvel environnement anaconda Si votre projet contient un fichier environment.yml, les packages s&amp;rsquo;installeront automatiquement lors de la première exécution du direnv allow.
Créer un fichier .</description>
    </item>
    
    <item>
      <title>Installer un serveur Sentry en moins de 5 minutes en 2022</title>
      <link>https://leandeep.com/installer-un-serveur-sentry-en-moins-de-5-minutes-en-2022/</link>
      <pubDate>Sat, 14 May 2022 21:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/installer-un-serveur-sentry-en-moins-de-5-minutes-en-2022/</guid>
      <description>Dans cet article nous allons voir comment installer Sentry sur OSX via Docker. Il fait suite à un premier article sur le même sujet écrit en 2018. La procédure a totalement changé donc voici une mise à jour.
Installation Installer le package suivant:
brew install coreutils Récupérer la dernière release de Sentry sur ce lien.
Dans mon cas, j&amp;rsquo;ai téléchargé la version self-hosted-22.5.0
Ensuite, il suffit d&amp;rsquo;exécuter les commandes suivantes:</description>
    </item>
    
    <item>
      <title>Mettre en place un Sonarqube et scanner son projet en moins de 5 minutes (v2)</title>
      <link>https://leandeep.com/mettre-en-place-un-sonarqube-et-scanner-son-projet-en-moins-de-5-minutes-v2/</link>
      <pubDate>Fri, 10 Dec 2021 06:56:00 +0000</pubDate>
      
      <guid>https://leandeep.com/mettre-en-place-un-sonarqube-et-scanner-son-projet-en-moins-de-5-minutes-v2/</guid>
      <description>Introduction Voici les étapes à suivre pour ajouter un sonar dans son projet. Il s&amp;rsquo;agit d&amp;rsquo;une mise à jour de l&amp;rsquo;article suivant qui n&amp;rsquo;est plus forcément à jour car le projet Sonar a évolué positivement.
Steps Déployer un sonar via Docker $ docker pull sonarqube $ docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube Installer sonar scanner cli brew install sonar-scanner Note: Mot de passe par défault: admin/admin</description>
    </item>
    
    <item>
      <title>Architecture applicative d&#39;une application AR Copy Paste</title>
      <link>https://leandeep.com/architecture-applicative-dune-application-ar-copy-paste/</link>
      <pubDate>Wed, 29 Sep 2021 06:47:00 +0200</pubDate>
      
      <guid>https://leandeep.com/architecture-applicative-dune-application-ar-copy-paste/</guid>
      <description>Introduction Peut-être êtes-vous tombé sur cette vidéo qui a fait le buzz sur Linkedin où l&amp;rsquo;on voyait une app mobile prendre une photo de n&amp;rsquo;importe quel objet, le détourait automatiquement et l&amp;rsquo;envoyait sur Photoshop. Le concept est appelé &amp;ldquo;AR Copy Paste&amp;rdquo;. Voici un article dédié au concept
J&amp;rsquo;ai été très impressionné par la démo et me suis demandé comment c&amp;rsquo;était fait. J&amp;rsquo;ai donc codé un MVP qui refait exactement la même chose (au delta près du plugin Photoshop qui n&amp;rsquo;est qu&amp;rsquo;un wrapper autour de mon app web qui affichait déjà mon image détourée).</description>
    </item>
    
    <item>
      <title>Comment le RPA et Python me permettent de suivre les mouvements des fonds d&#39;investissement</title>
      <link>https://leandeep.com/comment-le-rpa-et-python-me-permettent-de-suivre-les-mouvements-des-fonds-dinvestissement/</link>
      <pubDate>Wed, 01 Sep 2021 23:47:00 +0200</pubDate>
      
      <guid>https://leandeep.com/comment-le-rpa-et-python-me-permettent-de-suivre-les-mouvements-des-fonds-dinvestissement/</guid>
      <description>Introduction Pour ceux qui ne connaissent pas est RPA, il s&amp;rsquo;agit du Robotic Process Automation. Voir la définition dans Wikipédia. Il existe pas mal de solutions élaborées comme UiPath, Automation Anywhere ou encore RPA-Python (anciennement TagUI).
Pour une fois, je ne vais pas rentrer dans trop de détails techniques et simplement vous parler de la manière dont j&amp;rsquo;ai automatisé une routine d&amp;rsquo;investissement sur des OPCVM.
Depuis quelque temps j&amp;rsquo;ai pris l&amp;rsquo;habitude de suivre la performance et l&amp;rsquo;évolution des portfolios de plusieurs fonds d&amp;rsquo;investissement sur Euronext, Nasdaq et S&amp;amp;P 500 et de quelques Gurus de la finance pour m&amp;rsquo;aider à faire les bons choix dans mes achats et reventes d&amp;rsquo;actions dans le but d&amp;rsquo;optimiser mes rendements sur le long terme.</description>
    </item>
    
    <item>
      <title>Charger automatiquement les variables d&#39;environnement et virtualenv des projets Python</title>
      <link>https://leandeep.com/charger-automatiquement-les-variables-denvironnement-et-virtualenv-des-projets-python/</link>
      <pubDate>Tue, 20 Jul 2021 21:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/charger-automatiquement-les-variables-denvironnement-et-virtualenv-des-projets-python/</guid>
      <description>Dans cet article, nous allons voir comment charger (et décharger) automatiquement les variables d&amp;rsquo;environnements de vous projets lors d&amp;rsquo;un cd (et accessoirement comment sourcer et désactiver les virtualenv Python).
D&amp;rsquo;autres solutions alternatives que je ne recommande pas existent: pipenv, autoenv
direnv Pour ce faire, nous allons utilise un utilitaire appelé direnv qui est disponible pour pas mal de distributions.
Le projet est accessible à l&amp;rsquo;adresse suivante: https://github.com/direnv/direnv
Installation sur OSX:</description>
    </item>
    
    <item>
      <title>Créer des NFTs sur Ethereum</title>
      <link>https://leandeep.com/cr%C3%A9er-des-nfts-sur-ethereum/</link>
      <pubDate>Fri, 11 Jun 2021 15:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/cr%C3%A9er-des-nfts-sur-ethereum/</guid>
      <description>Dans cet article, nous allons voir comment créer des NFT sur Ethereum en utilisant le projet Python Brownie. L&amp;rsquo;ensemble du tutorial a été réalisé avec Python 3.8. NodeJS sera également nécessaire pour installer Ganache. Dans cet article, j&amp;rsquo;ai utilisé la v10.23.3 ainsi qu&amp;rsquo;NPM 6.14.11.
Qu&amp;rsquo;est-ce que Brownie ? Similaire au framework Truffle, Brownie permet de développer, tester et déployer des Smart Contracts. A la différence de Truffle, il est écrit en Python 3.</description>
    </item>
    
    <item>
      <title>Mocker un datetime .now() dans un test unitaire Python</title>
      <link>https://leandeep.com/mocker-un-datetime-.now-dans-un-test-unitaire-python/</link>
      <pubDate>Tue, 23 Feb 2021 21:01:00 +0000</pubDate>
      
      <guid>https://leandeep.com/mocker-un-datetime-.now-dans-un-test-unitaire-python/</guid>
      <description>La fonction datetime.now() peut parfois &amp;ldquo;poser problème&amp;rdquo; dans les tests unitaires. En effet, lorsqu&amp;rsquo;on veut comparer le résultat d&amp;rsquo;une fonction comportant une date (now) à un objet pré-défini expected, cela peut poser problème&amp;hellip;
Si on essaye de patcher la fonction today() ou now() comme ceci
@mock.patch(&amp;#39;datetime.date.today&amp;#39;) def test(): datetime.date.today.return_value = date(2010, 1, 1) print datetime.date.today() cela ne fonctionnera pas car les types built-in sont immutables.
On aura alors une erreur du genre: TypeError: can&#39;t set attributes of built-in/extension type &#39;datetime.</description>
    </item>
    
    <item>
      <title>Fonctions avec plusieurs types en Python 3.10</title>
      <link>https://leandeep.com/fonctions-avec-plusieurs-types-en-python-3.10/</link>
      <pubDate>Tue, 08 Dec 2020 21:01:00 +0000</pubDate>
      
      <guid>https://leandeep.com/fonctions-avec-plusieurs-types-en-python-3.10/</guid>
      <description>Python 3.10, sorti officiellement le 04 octobre 2021, permet d&amp;rsquo;écrire de manière plus lisible les différentes types que peuvent prendre les arguments et données retournées par les fonctions.
Example pour une fonction qui prend un argument de type int ou str et qui retourne un objet de type int ou str:
def ma_fonction(argument: int | str) -&amp;gt; int | str: pass On utilise le caractère: |.
Avant, de Python 3.5 à 3.</description>
    </item>
    
  </channel>
</rss>
