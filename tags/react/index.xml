<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/react/</link>
    <description>Recent content in React on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 29 Sep 2021 06:47:00 +0200</lastBuildDate><atom:link href="https://leandeep.com/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Architecture applicative d&#39;une application AR Copy Paste</title>
      <link>https://leandeep.com/architecture-applicative-dune-application-ar-copy-paste/</link>
      <pubDate>Wed, 29 Sep 2021 06:47:00 +0200</pubDate>
      
      <guid>https://leandeep.com/architecture-applicative-dune-application-ar-copy-paste/</guid>
      <description>Introduction Peut-être êtes-vous tombé sur cette vidéo qui a fait le buzz sur Linkedin où l&amp;rsquo;on voyait une app mobile prendre une photo de n&amp;rsquo;importe quel objet, le détourait automatiquement et l&amp;rsquo;envoyait sur Photoshop. Le concept est appelé &amp;ldquo;AR Copy Paste&amp;rdquo;. Voici un article dédié au concept
J&amp;rsquo;ai été très impressionné par la démo et me suis demandé comment c&amp;rsquo;était fait. J&amp;rsquo;ai donc codé un MVP qui refait exactement la même chose (au delta près du plugin Photoshop qui n&amp;rsquo;est qu&amp;rsquo;un wrapper autour de mon app web qui affichait déjà mon image détourée).</description>
    </item>
    
    <item>
      <title>Coding Coneway&#39;s Game of Life en TDD</title>
      <link>https://leandeep.com/coding-coneways-game-of-life-en-tdd/</link>
      <pubDate>Sat, 15 Dec 2018 18:31:00 +0000</pubDate>
      
      <guid>https://leandeep.com/coding-coneways-game-of-life-en-tdd/</guid>
      <description>Ce weekend, j&amp;rsquo;ai pris pas mal de plaisir à faire un Kata en JavaScript et coder le jeu Conway&amp;rsquo;s Game of Life.
Si vous ne connaissez pas ce jeu il y a une formidable vidéo explicative sur la chaine science étonnante: https://www.youtube.com/watch?v=S-W0NX97DB0
Voici le code source de la partie front en React: https://github.com/oeeckhoutte/gol-kata-front
Voici la partie &amp;ldquo;business logic&amp;rdquo;: https://github.com/oeeckhoutte/gol-kata
En faisant un npm i ou yarn le module gol-kata dont le code est ci-dessus et que j&amp;rsquo;ai codé en TDD (Test Driven Development) se téléchargera dans le répertoire node_modules.</description>
    </item>
    
  </channel>
</rss>
