<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pytest on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/pytest/</link>
    <description>Recent content in Pytest on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 04 Apr 2018 21:53:00 +0000</lastBuildDate><atom:link href="https://leandeep.com/tags/pytest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pytest tricks</title>
      <link>https://leandeep.com/pytest-tricks/</link>
      <pubDate>Wed, 04 Apr 2018 21:53:00 +0000</pubDate>
      
      <guid>https://leandeep.com/pytest-tricks/</guid>
      <description>Mocker l&amp;rsquo;ouverture d&amp;rsquo;un fichier et tester les exceptions Pour la fonction suivante, il est possible d&amp;rsquo;exécuter différents tests. Les 3 exemples de tests ci-dessous montrent:
 Comment vérifier qu&amp;rsquo;un appel de fonction raise une exception Comment vérifier qu&amp;rsquo;un fichier de config est valide Comment créer un fichier de config temporaire &amp;ldquo;bouchonné&amp;rdquo;.  import os import json class InvalidConfig(Exception): pass def load_config(config_path): try: with open(config_path, &amp;#39;r&amp;#39;) as json_file: return json.load(json_file) except (OSError, IOError, json.</description>
    </item>
    
  </channel>
</rss>
