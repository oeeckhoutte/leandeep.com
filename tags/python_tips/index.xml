<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python_tips on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/python_tips/</link>
    <description>Recent content in python_tips on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 07 Jan 2023 07:00:00 +0200</lastBuildDate><atom:link href="https://leandeep.com/tags/python_tips/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Enregistrer vos playlists Youtube en mp3 ou mp4</title>
      <link>https://leandeep.com/enregistrer-vos-playlists-youtube-en-mp3-ou-mp4/</link>
      <pubDate>Sat, 07 Jan 2023 07:00:00 +0200</pubDate>
      
      <guid>https://leandeep.com/enregistrer-vos-playlists-youtube-en-mp3-ou-mp4/</guid>
      <description>Petit tip du jour de 25 secondes: pour enregistrer automatiquement via cli vos playlists Youtube en MP3, il vous suffit d&amp;rsquo;utiliser le package Python yt-dlp.
pip install yt-dlp # Enregistrement mp3 yt-dlp -f &amp;#39;ba&amp;#39; -x --audio-format mp3 lien_vers_votre_playlist # Enregistrement mp4 # Best video quality yt-dlp lien_vers_votre_playlist -f &amp;#34;bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best&amp;#34; # Enregistrement mp4 # Worst video quality mais high quality audio yt-dlp lien_vers_votre_playlist -f &amp;#34;worstvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best&amp;#34; </description>
    </item>
    
    <item>
      <title>Afficher les 500 dernières bougies d&#39;une paire crypto de Binance</title>
      <link>https://leandeep.com/afficher-les-500-derni%C3%A8res-bougies-dune-paire-crypto-de-binance/</link>
      <pubDate>Thu, 05 Jan 2023 07:00:00 +0200</pubDate>
      
      <guid>https://leandeep.com/afficher-les-500-derni%C3%A8res-bougies-dune-paire-crypto-de-binance/</guid>
      <description>Petit tip du jour. Voici comment afficher, en moins 2 minutes, l&amp;rsquo;évolution du cours d&amp;rsquo;une paire crypto présente sur Binance.
Installer les packages cctx et plotly puis créer un fichier contenant le code suivant:
import ccxt from datetime import datetime import plotly.graph_objects as go def run(): binance = ccxt.binance() trading_pair = &amp;#34;BTC/USDT&amp;#34; candles = binance.fetch_ohlcv(trading_pair, &amp;#34;1d&amp;#34;) dates = [] open_data = [] high_data = [] low_data = [] close_data = [] for candle in candles: dates.</description>
    </item>
    
    <item>
      <title>Convertir un fichier pipfile.lock en requirements.txt</title>
      <link>https://leandeep.com/convertir-un-fichier-pipfile.lock-en-requirements.txt/</link>
      <pubDate>Thu, 26 May 2022 21:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/convertir-un-fichier-pipfile.lock-en-requirements.txt/</guid>
      <description>Petit tip du jour pour convertir un fichier Pipfile en requirements.txt
En pré-requis, il faut avoir jq
brew install jq
Ensuite, il suffit d&amp;rsquo;exécuter la commande suivante:
jq -r &amp;#39;.default | to_entries[] | .key + .value.version&amp;#39; \ Pipfile.lock &amp;gt; requirements.txt </description>
    </item>
    
    <item>
      <title>Charger automatiquement les variables d&#39;environnement et virtualenv des projets Python</title>
      <link>https://leandeep.com/charger-automatiquement-les-variables-denvironnement-et-virtualenv-des-projets-python/</link>
      <pubDate>Tue, 20 Jul 2021 21:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/charger-automatiquement-les-variables-denvironnement-et-virtualenv-des-projets-python/</guid>
      <description>Dans cet article, nous allons voir comment charger (et décharger) automatiquement les variables d&amp;rsquo;environnements de vous projets lors d&amp;rsquo;un cd (et accessoirement comment sourcer et désactiver les virtualenv Python).
D&amp;rsquo;autres solutions alternatives que je ne recommande pas existent: pipenv, autoenv
direnv Pour ce faire, nous allons utilise un utilitaire appelé direnv qui est disponible pour pas mal de distributions.
Le projet est accessible à l&amp;rsquo;adresse suivante: https://github.com/direnv/direnv
Installation sur OSX:</description>
    </item>
    
    <item>
      <title>Mocker un datetime .now() dans un test unitaire Python</title>
      <link>https://leandeep.com/mocker-un-datetime-.now-dans-un-test-unitaire-python/</link>
      <pubDate>Tue, 23 Feb 2021 21:01:00 +0000</pubDate>
      
      <guid>https://leandeep.com/mocker-un-datetime-.now-dans-un-test-unitaire-python/</guid>
      <description>La fonction datetime.now() peut parfois &amp;ldquo;poser problème&amp;rdquo; dans les tests unitaires. En effet, lorsqu&amp;rsquo;on veut comparer le résultat d&amp;rsquo;une fonction comportant une date (now) à un objet pré-défini expected, cela peut poser problème&amp;hellip;
Si on essaye de patcher la fonction today() ou now() comme ceci
@mock.patch(&amp;#39;datetime.date.today&amp;#39;) def test(): datetime.date.today.return_value = date(2010, 1, 1) print datetime.date.today() cela ne fonctionnera pas car les types built-in sont immutables.
On aura alors une erreur du genre: TypeError: can&#39;t set attributes of built-in/extension type &#39;datetime.</description>
    </item>
    
    <item>
      <title>Fonctions avec plusieurs types en Python 3.10</title>
      <link>https://leandeep.com/fonctions-avec-plusieurs-types-en-python-3.10/</link>
      <pubDate>Tue, 08 Dec 2020 21:01:00 +0000</pubDate>
      
      <guid>https://leandeep.com/fonctions-avec-plusieurs-types-en-python-3.10/</guid>
      <description>Python 3.10, sorti officiellement le 04 octobre 2021, permet d&amp;rsquo;écrire de manière plus lisible les différentes types que peuvent prendre les arguments et données retournées par les fonctions.
Example pour une fonction qui prend un argument de type int ou str et qui retourne un objet de type int ou str:
def ma_fonction(argument: int | str) -&amp;gt; int | str: pass On utilise le caractère: |.
Avant, de Python 3.5 à 3.</description>
    </item>
    
    <item>
      <title>Rendre du code plus propre avec des namedtuples</title>
      <link>https://leandeep.com/rendre-du-code-plus-propre-avec-des-namedtuples/</link>
      <pubDate>Tue, 18 Aug 2020 23:02:09 -0700</pubDate>
      
      <guid>https://leandeep.com/rendre-du-code-plus-propre-avec-des-namedtuples/</guid>
      <description>Imaginons que nous souhaitions afficher le contenu d&amp;rsquo;une table de base de données contenant des informations sur les salariés d&amp;rsquo;une entreprise. On peut utiliser une liste de tuples pour stocker en mémoire les lignes de la table. Chaque index d&amp;rsquo;un tuple correspond alors à une colonne de la table. Si la table contient les colonnes suivantes: &amp;ldquo;name&amp;rdquo;, &amp;ldquo;birthdate&amp;rdquo;, &amp;ldquo;salary&amp;rdquo; et &amp;ldquo;employment_date&amp;rdquo;, l&#39;index 2 correspond donc au salaire d&amp;rsquo;un employé. C&amp;rsquo;est plutôt simple à retenir avec seulement 4 indexes mais si la table possède 20 colonnes, ce sera plus difficile à retenir.</description>
    </item>
    
    <item>
      <title>Mocker en 1 minute les appels vers des services externes</title>
      <link>https://leandeep.com/mocker-en-1-minute-les-appels-vers-des-services-externes/</link>
      <pubDate>Sat, 04 Jul 2020 21:20:04 -0700</pubDate>
      
      <guid>https://leandeep.com/mocker-en-1-minute-les-appels-vers-des-services-externes/</guid>
      <description>Que ce soit pour du dévelopement ou pour exécuter des tests ou autres, il est très fréquent de vouloir mocker les appels vers des services externes. Si vous utilisez le module requests dans votre projet vous pouvez tout simplement ajouter le module requests_cache pour créer des bouchons. En effet, ce dernier va mettre en cache (dans une base de données sqlite) toutes les réponses aux requêtes faites par requests.
Mise en place Bien sûr, on install le module: pip install requests_cache.</description>
    </item>
    
    <item>
      <title>Comparaison de strings et logique floue</title>
      <link>https://leandeep.com/comparaison-de-strings-et-logique-floue/</link>
      <pubDate>Thu, 16 Jan 2020 16:20:04 -0700</pubDate>
      
      <guid>https://leandeep.com/comparaison-de-strings-et-logique-floue/</guid>
      <description>Pour implémenter dans la logique floue pour comparer deux strings, on peut utiliser la distance de Levenshtein.
Voici le code permettant de calculer cette distance. Rien de particulier, on retrouve partout ce code sur internet.
import numpy as np def levenshtein_ratio_and_distance(s, t, ratio_calc = False): &amp;#34;&amp;#34;&amp;#34; levenshtein_ratio_and_distance: Calculates levenshtein distance between two strings. If ratio_calc = True, the function computes the levenshtein distance ratio of similarity between two strings For all i and j, distance[i,j] will contain the Levenshtein distance between the first i characters of s and the first j characters of t &amp;#34;&amp;#34;&amp;#34; # Initialize matrix of zeros rows = len(s)+1 cols = len(t)+1 distance = np.</description>
    </item>
    
    <item>
      <title>Eviter les if ou try/except avec les dictionnaires</title>
      <link>https://leandeep.com/eviter-les-if-ou-try/except-avec-les-dictionnaires/</link>
      <pubDate>Thu, 16 Jan 2020 01:20:04 -0700</pubDate>
      
      <guid>https://leandeep.com/eviter-les-if-ou-try/except-avec-les-dictionnaires/</guid>
      <description>Manipuler des dictionnaires Python est facile. Pour les transformer on peut utiliser des dict comprehension. Par exemple, pour inverser un dictionnaire on peut le faire en une ligne de code.
prenoms = {&amp;#39;titi&amp;#39;: 1, &amp;#39;tata&amp;#39;: 2, &amp;#39;toto&amp;#39;: 3} invert_prenoms = {v: k for k, v in prenoms.iteritems()} print(invert_prenoms) {1: &amp;#39;titi&amp;#39;, 2: &amp;#39;tata&amp;#39;, 3: &amp;#39;toto&amp;#39;} Pour sélectionner une valeur à partir d&amp;rsquo;une clé, on peut
soit tester si une clé existe dans le dict ou catcher l&amp;rsquo;exception KeyError avec try/except ou on peut utiliser un defaultdict, ce qui permet d&amp;rsquo;avoir du code plus propre, et plus facilement testable.</description>
    </item>
    
  </channel>
</rss>
