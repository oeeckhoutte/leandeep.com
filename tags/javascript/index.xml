<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/javascript/</link>
    <description>Recent content in JavaScript on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 15 Dec 2018 18:31:00 +0000</lastBuildDate><atom:link href="https://leandeep.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Coding Coneway&#39;s Game of Life en TDD</title>
      <link>https://leandeep.com/coding-coneways-game-of-life-en-tdd/</link>
      <pubDate>Sat, 15 Dec 2018 18:31:00 +0000</pubDate>
      
      <guid>https://leandeep.com/coding-coneways-game-of-life-en-tdd/</guid>
      <description>Ce weekend, j&amp;rsquo;ai pris pas mal de plaisir à faire un Kata en JavaScript et coder le jeu Conway&amp;rsquo;s Game of Life.
Si vous ne connaissez pas ce jeu il y a une formidable vidéo explicative sur la chaine science étonnante: https://www.youtube.com/watch?v=S-W0NX97DB0
Voici le code source de la partie front en React: https://github.com/oeeckhoutte/gol-kata-front
Voici la partie &amp;ldquo;business logic&amp;rdquo;: https://github.com/oeeckhoutte/gol-kata
En faisant un npm i ou yarn le module gol-kata dont le code est ci-dessus et que j&amp;rsquo;ai codé en TDD (Test Driven Development) se téléchargera dans le répertoire node_modules.</description>
    </item>
    
    <item>
      <title>Support des modules ES6 dans Chrome 61</title>
      <link>https://leandeep.com/support-des-modules-es6-dans-chrome-61/</link>
      <pubDate>Wed, 06 Sep 2017 13:03:00 +0000</pubDate>
      
      <guid>https://leandeep.com/support-des-modules-es6-dans-chrome-61/</guid>
      <description>Excellente news, Chrome supporte maintenant nativement les modules ES6. Enfin!
Exemple:
index.html &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Test module ES6&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;2+3 = &amp;lt;span class=&amp;#34;result&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;script type=&amp;#34;module&amp;#34;&amp;gt; import { add } from &amp;#39;./common.js&amp;#39;; (function () { document.querySelector(&amp;#39;.result&amp;#39;).innerText = add(2, 3); console.log(add(2, 3)); }()); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; common.js console.log(&amp;#39;common.js&amp;#39;); export function add (a, b) { return a + b; } </description>
    </item>
    
    <item>
      <title>Programmer un réseau de neurones en JavaScript</title>
      <link>https://leandeep.com/programmer-un-r%C3%A9seau-de-neurones-en-javascript/</link>
      <pubDate>Sat, 03 Jun 2017 22:45:00 +0000</pubDate>
      
      <guid>https://leandeep.com/programmer-un-r%C3%A9seau-de-neurones-en-javascript/</guid>
      <description>Pour bien comprendre comment fonctionnent les réseaux de neurones, nous allons en créer un from scratch en JavaScript. Je pense que c&amp;rsquo;est intéressant d&amp;rsquo;en créer un de toute pièce avant de s&amp;rsquo;attaquer à des réseaux de neurones profonds ou d&amp;rsquo;utiliser des frameworks qui masquent toute la complexité.
Introduction Un neurone biologique est composé d&amp;rsquo;un corps cellulaire, d&amp;rsquo;un réseau de dendrites et d&amp;rsquo;un axone.
Le corps cellulaire contient le patrimoine génétique. Les signaux électriques transitent par le réseau de dendrites.</description>
    </item>
    
    <item>
      <title>Pourquoi il faut utiliser Object.is() pour comparer des éléments</title>
      <link>https://leandeep.com/pourquoi-il-faut-utiliser-object.is-pour-comparer-des-%C3%A9l%C3%A9ments/</link>
      <pubDate>Mon, 10 Apr 2017 19:51:00 +0000</pubDate>
      
      <guid>https://leandeep.com/pourquoi-il-faut-utiliser-object.is-pour-comparer-des-%C3%A9l%C3%A9ments/</guid>
      <description>Nous savons tous que le langage JavaScript manque de typage et qu&amp;rsquo;il faut faire du Typescript et qu&amp;rsquo;on peut obtenir des résultats bizarres à cause de ce qu&amp;rsquo;on appelle la coercion ou le casting.
&amp;ldquo;Converting a value from one type to another is often called &amp;ldquo;type casting,&amp;rdquo; when done explicitly, and &amp;ldquo;coercion&amp;rdquo; when done implicitly (forced by the rules of how a value is used) Source: https://github.com/getify/You-Dont-Know-JS
Exemple &amp;ldquo;What the fuck&amp;rdquo; :</description>
    </item>
    
    <item>
      <title>« Ok google… Ouvre le portail » !</title>
      <link>https://leandeep.com/ok-google-ouvre-le-portail/</link>
      <pubDate>Sun, 08 Jan 2017 20:28:00 +0000</pubDate>
      
      <guid>https://leandeep.com/ok-google-ouvre-le-portail/</guid>
      <description>&lt;p&gt;Pour bien commencer l’année et ce blog avec ce premier article, voici comment j’ai transformé mon portail en un portail connecté.&lt;/p&gt;
&lt;p&gt;Lorsque je prononce les mots « Ok Google… Ouvre le portail » sur mon Smartphone, ce dernier déclenche une commande qui actionne le moteur du portail. Je peux ainsi en fonction des messages que j’ai programmé, ouvrir ou fermer le portail de n’importe où.&lt;/p&gt;
&lt;br/&gt;
&lt;h2 id=&#34;description-du-fonctionnement&#34;&gt;Description du fonctionnement&lt;/h2&gt;
&lt;p&gt;Voici un schéma qui décrit globalement le fonctionnement du système.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://leandeep.com/images/article-ok-google-portail.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Retour d&#39;expérience, Évaluation d’Ionic 2 Beta 11</title>
      <link>https://leandeep.com/retour-dexp%C3%A9rience-%C3%A9valuation-dionic-2-beta-11/</link>
      <pubDate>Wed, 10 Aug 2016 19:16:00 +0000</pubDate>
      
      <guid>https://leandeep.com/retour-dexp%C3%A9rience-%C3%A9valuation-dionic-2-beta-11/</guid>
      <description>Ionic a annoncé la sortie de sa version Ionic 2 beta 11. J’ai voulu tester Ionic 2 et les nouveaux services disponibles.
Franchement c’est très impressionnant. En quelques heures seulement j’ai pu réaliser une application Android qui permet de recevoir les dernières news sur TensorFlow, d’envoyer des push notifications et qui se met à jour toute seule grâce au service Deploy.
C’est une première application minimaliste mais cela m’a permis de tester Ionic 2.</description>
    </item>
    
    <item>
      <title>Moderne Javascript Tips</title>
      <link>https://leandeep.com/moderne-javascript-tips/</link>
      <pubDate>Sat, 16 Jul 2016 19:00:00 +0000</pubDate>
      
      <guid>https://leandeep.com/moderne-javascript-tips/</guid>
      <description>Introduction Ce weekend, j&amp;rsquo;ai fait un Kata en JS. Voici une liste de snippets utiles à connaître pour coder proprement son app.
Tips Calculer le nombre propriétés que possède un objet
const fleur = { couleur: &amp;#39;rouge&amp;#39;, nom: &amp;#39;rose&amp;#39; } Object.keys(fleurs).length Trier un tableau d&amp;rsquo;objets en fonction de certaines propriétés
const liste = [ { couleur: &amp;#39;blanc&amp;#39;, taille: &amp;#39;XXL&amp;#39; }, { couleur: &amp;#39;rouge&amp;#39;, taille: &amp;#39;XL&amp;#39; }, { couleur: &amp;#39;noir&amp;#39;, taille: &amp;#39;M&amp;#39; } ] // Trier par ordre alphabétique le nom des couleurs: blanc, noir, rouge.</description>
    </item>
    
    <item>
      <title>Réduire un tableau en JavaScript</title>
      <link>https://leandeep.com/r%C3%A9duire-un-tableau-en-javascript/</link>
      <pubDate>Sat, 27 Feb 2016 20:20:00 +0000</pubDate>
      
      <guid>https://leandeep.com/r%C3%A9duire-un-tableau-en-javascript/</guid>
      <description>Réduire un tableau en JavaScript peut être effectué en utilisant la méthode reduce(). Cette méthode applique une fonction contre un accumulateur qui prend chaque valeur du tableau (de gauche à droite) pour le réduire à une seule valeure.
Signature de la méthode reduce() La méthode reduce() prend 2 paramètres:
(Obligatoire) Une fonction callback de réduction. Elle sera appliquée à chaque paire: valeur précédente (résultat de la dernière exécution) et valeur suivante.</description>
    </item>
    
    <item>
      <title>Comprendre le hoisting en JavaScript</title>
      <link>https://leandeep.com/comprendre-le-hoisting-en-javascript/</link>
      <pubDate>Sun, 10 Jan 2016 19:52:00 +0000</pubDate>
      
      <guid>https://leandeep.com/comprendre-le-hoisting-en-javascript/</guid>
      <description>Comprendre le hoisting en JavaScript est important pour organiser vos fonctions.
Rappel entre déclarer et définir une variable: Déclarer une variable signifie: &amp;ldquo;dire au système qu&amp;rsquo;une variable existe&amp;rdquo; Définir une variable signifie: &amp;ldquo;assigner une valeur à une variable&amp;rdquo;
Lorsqu&amp;rsquo;on déclare une variable ou une fonction elles sont hoisted (hissées) en haut du fichier. Par contre, lorsqu&amp;rsquo;on définit une variable ou déclare et définit sur la même ligne une variable il n&amp;rsquo;y a pas de hoisting.</description>
    </item>
    
    <item>
      <title>Introduction à ES6</title>
      <link>https://leandeep.com/introduction-%C3%A0-es6/</link>
      <pubDate>Mon, 04 Jan 2016 19:35:00 +0000</pubDate>
      
      <guid>https://leandeep.com/introduction-%C3%A0-es6/</guid>
      <description>Voici les bases à connaître pour utiliser ES6:
Arrow Functions (Fonctions fléchées) Exemple: Plutôt que de coder:
const myFunction = function foo() { //... } Utiliser maintenant:
const myFunction = () =&amp;gt; { //... } // Si la méthode ne possède qu&amp;#39;une seule déclaration, on écrit la méthode comme ceci: const myFunction = i =&amp;gt; 3 * i The spread operator (Syntaxe de décomposition) Si on a:
const c = [.</description>
    </item>
    
  </channel>
</rss>
