<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Trading on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/trading/</link>
    <description>Recent content in Trading on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 02 Feb 2024 18:10:00 +0000</lastBuildDate><atom:link href="https://leandeep.com/tags/trading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Backtester ses stratégie de trading avec Backtrader</title>
      <link>https://leandeep.com/backtester-ses-strat%C3%A9gie-de-trading-avec-backtrader/</link>
      <pubDate>Fri, 02 Feb 2024 18:10:00 +0000</pubDate>
      
      <guid>https://leandeep.com/backtester-ses-strat%C3%A9gie-de-trading-avec-backtrader/</guid>
      <description>Voici un exemple de code Python permettant de backtester une stratégie (ici j&amp;rsquo;en ai créé une complètement inutile mais cela permet d&amp;rsquo;illustrer mon propose).
Pré-requis
pip install Pyarrow==15.0.0 pandas==2.2.0 backtrader==1.9.78.123 matplotlib==3.8.2 import math import pandas as pd import backtrader as bt import ccxt # Charger les données historiques depuis Binance exchange = ccxt.binance( { &amp;#34;apiKey&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;secret&amp;#34;: &amp;#34;&amp;#34;, } ) symbol = &amp;#34;ETH/USDT&amp;#34; timeframe = &amp;#34;1h&amp;#34; ohlcv = exchange.fetch_ohlcv(symbol, timeframe) df = pd.</description>
    </item>
    
    <item>
      <title>Autres Blockchains et RPC nodes</title>
      <link>https://leandeep.com/autres-blockchains-et-rpc-nodes/</link>
      <pubDate>Fri, 15 Jul 2022 09:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/autres-blockchains-et-rpc-nodes/</guid>
      <description>Algorand Aurora Cronos KuCoin Near IoTeX Tezos Theta (soon) TomoChain Algorand Providers
Pocket Network - https://mainnet.portal.pokt.network Quicknode - https://www.quicknode.com/ Own node
https://developer.algorand.org/docs/run-a-node/setup/install/ Aurora Providers
Infura - https://infura.io Public Endpoints
https://mainnet.aurora.dev Own node
https://doc.aurora.dev/#running-your-own-aurora-node Cronos Public Endpoints
https://rpc.artemisone.org/cronos https://evm.cronos.org/ https://rpc.vvs.finance/ https://rpc.crodex.app/ https://mmf-rpc.xstaking.sg https://gateway.nebkas.ro/ Chain Id 25
Currency CRO
Explorer
https://cronos.org/explorer/ KuCoin Public Endpoints
https://rpc-mainnet.kcc.network/ Own node
https://docs.kcc.io/#/en-us/?id=node Near Providers
ANKR - https://ankr.com Infura - https://infura.io Public Endpoints
https://rpc.ankr.com/near https://near.public-rpc.com Own node</description>
    </item>
    
    <item>
      <title>Blockchains et RPC nodes pour mes robots de trading</title>
      <link>https://leandeep.com/blockchains-et-rpc-nodes-pour-mes-robots-de-trading/</link>
      <pubDate>Sun, 03 Jul 2022 21:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/blockchains-et-rpc-nodes-pour-mes-robots-de-trading/</guid>
      <description>Voici des informations de base sur les blockchains sur lesquels sont connectés mes robots de trading.
Arbitrum Avalanche BNB Smart Chain (BSC) Celo Ethereum Fantom Fuse Gnosis (xDAI) Harmony (Mainnet Shard 0) Moonriver Optimism Polygon Solana Arbitrum Providers
Alchemy - https://www.alchemy.com ANKR - https://ankr.com Moralis - https://moralis.io QuickNode - https://www.quicknode.com/ Infura - https://infura.io Public Endpoints
https://arb1.arbitrum.io/rpc https://arbitrum.public-rpc.com https://rpc.ankr.com/arbitrum Chain Id 42161
Currency ETH
Explorer
https://arbiscan.io/ https://explorer.arbitrum.io/ Avalanche (C-Chain) Providers
AllNodes - https://www.</description>
    </item>
    
    <item>
      <title>Exemples de DEX que j&#39;utilise dans mes robots de trading</title>
      <link>https://leandeep.com/exemples-de-dex-que-jutilise-dans-mes-robots-de-trading/</link>
      <pubDate>Sun, 03 Jul 2022 21:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/exemples-de-dex-que-jutilise-dans-mes-robots-de-trading/</guid>
      <description>Voici quelques exemples de DEXes sur lesquels mes robots de trading sont connectés ainsi que quelques informations de base les concernants. J&amp;rsquo;ai pris l&amp;rsquo;exemple des 2 Blockchains les plus utilisées après Ethereum à savoir BNB Smart Chain (BSC) et Polygon.
Pour le moment, et jusqu&amp;rsquo;à ce qu&amp;rsquo;on passe en version 2, je n&amp;rsquo;utilise plus Ethereum à cause de gas fees qui rendent les trades moins intéressants.
Bien sûr il y en a plein d&amp;rsquo;autres et sur des tas de blockchains différentes.</description>
    </item>
    
    <item>
      <title>Télécharger les ABIs des smart contracts vérifiés sur bscscan</title>
      <link>https://leandeep.com/t%C3%A9l%C3%A9charger-les-abis-des-smart-contracts-v%C3%A9rifi%C3%A9s-sur-bscscan/</link>
      <pubDate>Sun, 03 Jul 2022 21:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/t%C3%A9l%C3%A9charger-les-abis-des-smart-contracts-v%C3%A9rifi%C3%A9s-sur-bscscan/</guid>
      <description>Tout est dans le titre. Voici un script très simple permettant de télécharger les ABIs disponibles sur BSC Scan.
Créer un fichier get_abi.py et coller le contenu suivant:
#!/usr/bin/python import argparse import requests import json ABI_ENDPOINT = &amp;#34;https://api.etherscan.io/api?module=contract&amp;amp;action=getabi&amp;amp;address=&amp;#34; parser = argparse.ArgumentParser() parser.add_argument(&amp;#34;-a&amp;#34;, &amp;#34;--address&amp;#34;, type=str, help=&amp;#34;Smart contract address&amp;#34;) parser.add_argument(&amp;#34;-o&amp;#34;, &amp;#34;--output&amp;#34;, type=str, help=&amp;#34;Path to store the output ABI JSON file&amp;#34;, required=True) def __main__() -&amp;gt; None: &amp;#34;&amp;#34;&amp;#34;Exports contract ABI in JSON&amp;#34;&amp;#34;&amp;#34; args = parser.</description>
    </item>
    
  </channel>
</rss>
