<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webassembly on Bienvenue sur le site de Lean Deep</title>
    <link>https://leandeep.com/tags/webassembly/</link>
    <description>Recent content in Webassembly on Bienvenue sur le site de Lean Deep</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 22 Dec 2019 18:28:03 +0000</lastBuildDate>
    
	<atom:link href="https://leandeep.com/tags/webassembly/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust to Webassembly</title>
      <link>https://leandeep.com/rust-to-webassembly/</link>
      <pubDate>Sun, 22 Dec 2019 18:28:03 +0000</pubDate>
      
      <guid>https://leandeep.com/rust-to-webassembly/</guid>
      <description>Introduction L&#39;objectif de cet article est de voir comment compiler un tout petit programme en Rust et de l&#39;appeler soit dans un navigateur, soit dans un programme NodeJS ou soit dans un programme Python.
Installation Installer rustup
 Rustup is an installer for the systems programming language Rust
 curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh source $HOME/.cargo/env Installer wasm-pack
curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh Cr√©ation d&#39;une librairie Rust cargo new --lib days-count Remplacer le contenu du fichier days-count/src/lib.</description>
    </item>
    
  </channel>
</rss>