<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Patterns on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/design-patterns/</link>
    <description>Recent content in Design Patterns on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 12 Jun 2019 19:28:00 +0000</lastBuildDate><atom:link href="https://leandeep.com/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dependency Injection in Python</title>
      <link>https://leandeep.com/dependency-injection-in-python/</link>
      <pubDate>Wed, 12 Jun 2019 19:28:00 +0000</pubDate>
      
      <guid>https://leandeep.com/dependency-injection-in-python/</guid>
      <description>Introduction There are many articles available online that talk about dependency injection (DI) in Python. Most of them suggest complexe methods for something that can be finally very easy to do using the built-in Python mechanisms.
Working with dependency injection is a good thing since it makes your code more testable and decoupled.
To implement dependency injection we are going to use the super method. Super calls the next dependency in the Method Resolution Order.</description>
    </item>
    
  </channel>
</rss>
