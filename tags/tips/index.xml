<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tips on Bienvenue sur le site de Lean Deep</title>
    <link>https://leandeep.com/tags/tips/</link>
    <description>Recent content in tips on Bienvenue sur le site de Lean Deep</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 26 Oct 2020 20:44:00 +0000</lastBuildDate><atom:link href="https://leandeep.com/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Créer un proxy MITM pour mesurer la performance des APIs</title>
      <link>https://leandeep.com/cr%C3%A9er-un-proxy-mitm-pour-mesurer-la-performance-des-apis/</link>
      <pubDate>Mon, 26 Oct 2020 20:44:00 +0000</pubDate>
      
      <guid>https://leandeep.com/cr%C3%A9er-un-proxy-mitm-pour-mesurer-la-performance-des-apis/</guid>
      <description>Introduction Nous allons voir dans cet article comment mettre en place un proxy MITM pour mesurer la performance d&amp;rsquo;une API. Nous parlons ici d&amp;rsquo;une solution basique &amp;ldquo;quick win&amp;rdquo; à mettre en place en 5 minutes. Je ne parle pas d&amp;rsquo;une solution APM évoluée où il faut installer un SDK&amp;hellip;
 Installation docker run --rm -it \ -p 8080:8080 \ -p 8081:8081 \ oeeckhoutte/mitmproxy mitmweb \ --web-host 0.0.0.0  Usage watch -n 5 &amp;quot;curl -k --proxy http://127.</description>
    </item>
    
    <item>
      <title>Regarder un film sur vlc over SSH</title>
      <link>https://leandeep.com/regarder-un-film-sur-vlc-over-ssh/</link>
      <pubDate>Thu, 08 Oct 2020 18:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/regarder-un-film-sur-vlc-over-ssh/</guid>
      <description>Tout est dans le titre. Avec la commande ci-dessous, vous pouvez visionner sur VLC un film présent sur une machine distante via SFTP (Secure File Transfer Protocol). C&amp;rsquo;est très pratique si vous avez du contenu vidéo sur une autre machine et vous ne voulez pas attendre de le télécharger pour le regarder.
 vlc sftp://user@host:/path/to/file  Bon visionnage.</description>
    </item>
    
    <item>
      <title>Rendre du code plus propre avec des namedtuples</title>
      <link>https://leandeep.com/rendre-du-code-plus-propre-avec-des-namedtuples/</link>
      <pubDate>Tue, 18 Aug 2020 23:02:09 -0700</pubDate>
      
      <guid>https://leandeep.com/rendre-du-code-plus-propre-avec-des-namedtuples/</guid>
      <description>Imaginons que nous souhaitions afficher le contenu d&amp;rsquo;une table de base de données contenant des informations sur les salariés d&amp;rsquo;une entreprise. On peut utiliser une liste de tuples pour stocker en mémoire les lignes de la table. Chaque index d&amp;rsquo;un tuple correspond alors à une colonne de la table. Si la table contient les colonnes suivantes: &amp;ldquo;name&amp;rdquo;, &amp;ldquo;birthdate&amp;rdquo;, &amp;ldquo;salary&amp;rdquo; et &amp;ldquo;employment_date&amp;rdquo;, l&#39;index 2 correspond donc au salaire d&amp;rsquo;un employé. C&amp;rsquo;est plutôt simple à retenir avec seulement 4 indexes mais si la table possède 20 colonnes, ce sera plus difficile à retenir.</description>
    </item>
    
    <item>
      <title>Mocker en 1 minute les appels vers des services externes</title>
      <link>https://leandeep.com/mocker-en-1-minute-les-appels-vers-des-services-externes/</link>
      <pubDate>Sat, 04 Jul 2020 21:20:04 -0700</pubDate>
      
      <guid>https://leandeep.com/mocker-en-1-minute-les-appels-vers-des-services-externes/</guid>
      <description>Que ce soit pour du dévelopement ou pour exécuter des tests ou autres, il est très fréquent de vouloir mocker les appels vers des services externes. Si vous utilisez le module requests dans votre projet vous pouvez tout simplement ajouter le module requests_cache pour créer des bouchons. En effet, ce dernier va mettre en cache (dans une base de données sqlite) toutes les réponses aux requêtes faites par requests.
 Mise en place Bien sûr, on install le module: pip install requests_cache.</description>
    </item>
    
    <item>
      <title>Comparaison de strings et logique floue</title>
      <link>https://leandeep.com/comparaison-de-strings-et-logique-floue/</link>
      <pubDate>Thu, 16 Jan 2020 16:20:04 -0700</pubDate>
      
      <guid>https://leandeep.com/comparaison-de-strings-et-logique-floue/</guid>
      <description>Pour implémenter dans la logique floue pour comparer deux strings, on peut utiliser la distance de Levenshtein.
Voici le code permettant de calculer cette distance. Rien de particulier, on retrouve partout ce code sur internet.
import numpy as np def levenshtein_ratio_and_distance(s, t, ratio_calc = False): &amp;quot;&amp;quot;&amp;quot; levenshtein_ratio_and_distance: Calculates levenshtein distance between two strings. If ratio_calc = True, the function computes the levenshtein distance ratio of similarity between two strings For all i and j, distance[i,j] will contain the Levenshtein distance between the first i characters of s and the first j characters of t &amp;quot;&amp;quot;&amp;quot; # Initialize matrix of zeros rows = len(s)+1 cols = len(t)+1 distance = np.</description>
    </item>
    
    <item>
      <title>Eviter les if ou try/except avec les dictionnaires</title>
      <link>https://leandeep.com/eviter-les-if-ou-try/except-avec-les-dictionnaires/</link>
      <pubDate>Thu, 16 Jan 2020 01:20:04 -0700</pubDate>
      
      <guid>https://leandeep.com/eviter-les-if-ou-try/except-avec-les-dictionnaires/</guid>
      <description>Manipuler des dictionnaires Python est facile. Pour les transformer on peut utiliser des dict comprehension. Par exemple, pour inverser un dictionnaire on peut le faire en une ligne de code.
prenoms = {&#39;titi&#39;: 1, &#39;tata&#39;: 2, &#39;toto&#39;: 3} invert_prenoms = {v: k for k, v in prenoms.iteritems()} print(invert_prenoms) {1: &#39;titi&#39;, 2: &#39;tata&#39;, 3: &#39;toto&#39;} Pour sélectionner une valeur à partir d&amp;rsquo;une clé, on peut
 soit tester si une clé existe dans le dict ou catcher l&amp;rsquo;exception KeyError avec try/except ou on peut utiliser un defaultdict, ce qui permet d&amp;rsquo;avoir du code plus propre, et plus facilement testable.</description>
    </item>
    
    <item>
      <title>Slicer de manière Pythonique un set</title>
      <link>https://leandeep.com/slicer-de-mani%C3%A8re-pythonique-un-set/</link>
      <pubDate>Wed, 15 Jan 2020 15:20:04 -0700</pubDate>
      
      <guid>https://leandeep.com/slicer-de-mani%C3%A8re-pythonique-un-set/</guid>
      <description>Ce tip décrit comment slicer (découper) un set de manière Pythonique.
Les sets sont des iterables. On peut donc utiliser la méthode itertools.islice qui va nous permettre de créer un iterator construit à partir d&amp;rsquo;un sous-ensemble du set de départ.
import itertools prenoms_list = [&#39;titi&#39;, &#39;tata&#39;, &#39;totot&#39;, &#39;titi&#39;] prenoms_set = set(prenoms_list) small_prenoms_set = set(itertools.islice(prenoms_set, 2)) </description>
    </item>
    
    <item>
      <title>Utiliser zip pour itérer sur deux listes</title>
      <link>https://leandeep.com/utiliser-zip-pour-it%C3%A9rer-sur-deux-listes/</link>
      <pubDate>Tue, 14 Jan 2020 21:20:04 -0700</pubDate>
      
      <guid>https://leandeep.com/utiliser-zip-pour-it%C3%A9rer-sur-deux-listes/</guid>
      <description>La bonne approche pour itérer sur deux listes est de créer deux variables, par exemple liste_un et liste_deux et d&amp;rsquo;utiliser zip en passant en paramètre les 2 variables.
Anti-pattern (Pas bien!) nombres = [1, 2, 3] prenoms = [&amp;quot;titi&amp;quot;, &amp;quot;tata&amp;quot;, &amp;quot;toto&amp;quot;] for idx in range(len(nombres)): print(nombres[idx], prenoms[idx]) Bonne pratique (Bien!) Dans les 2 cas, le résultat est identique à savoir:
1 titi 2 tata 3 toto Mais voici une manière plus Pythonique d&amp;rsquo;itérer sur ces 2 listes.</description>
    </item>
    
    <item>
      <title>Utiliser zip pour itérer sur deux listes</title>
      <link>https://leandeep.com/tips/utiliser-zip-pour-iterer-sur-deux-listes-copy/</link>
      <pubDate>Tue, 14 Jan 2020 21:20:04 -0700</pubDate>
      
      <guid>https://leandeep.com/tips/utiliser-zip-pour-iterer-sur-deux-listes-copy/</guid>
      <description>La bonne approche pour itérer sur deux listes est de créer deux variables, par exemple liste_un et liste_deux et d&amp;rsquo;utiliser zip en passant en paramètre les 2 variables.
Anti-pattern (Pas bien!) nombres = [1, 2, 3] prenoms = [&amp;quot;titi&amp;quot;, &amp;quot;tata&amp;quot;, &amp;quot;toto&amp;quot;] for idx in range(len(nombres)): print(nombres[idx], prenoms[idx]) Bonne pratique (Bien!) Dans les 2 cas, le résultat est identique à savoir:
1 titi 2 tata 3 toto Mais voici une manière plus Pythonique d&amp;rsquo;itérer sur ces 2 listes.</description>
    </item>
    
    <item>
      <title>Utiliser une boucle non Pythonique</title>
      <link>https://leandeep.com/utiliser-une-boucle-non-pythonique/</link>
      <pubDate>Sat, 11 Jan 2020 21:20:04 -0700</pubDate>
      
      <guid>https://leandeep.com/utiliser-une-boucle-non-pythonique/</guid>
      <description>Pour accéder aux éléments d&amp;rsquo;une liste et afficher l&amp;rsquo;index des éléments, il vaut mieux privilégier l&amp;rsquo;utilisation d&#39;enumerate() sur la liste plutôt que de créer une boucle et d&amp;rsquo;incrémenter la valeur de l&amp;rsquo;index.
 Anti-pattern (Pas bien!) prenoms = [&amp;quot;titi&amp;quot;, &amp;quot;tata&amp;quot;, &amp;quot;toto&amp;quot;] for idx in range(0, len(prenoms)): prenom = l[idx] print(idx, prenom)  Bonne pratique (Bien!) Voici la manière plus Pythonique d&amp;rsquo;itérérer sur une liste.
prenoms = [&amp;quot;titi&amp;quot;, &amp;quot;tata&amp;quot;, &amp;quot;toto&amp;quot;] for idx, prenom in enumerate(prenoms): print(idx, prenom) </description>
    </item>
    
  </channel>
</rss>
