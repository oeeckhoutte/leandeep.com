<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solidity on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/solidity/</link>
    <description>Recent content in Solidity on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 05 Nov 2021 09:08:00 +0000</lastBuildDate><atom:link href="https://leandeep.com/tags/solidity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Smart contract development: Emprunter 1 million de DAI (~dollars) avec un flashloan sur Aave</title>
      <link>https://leandeep.com/smart-contract-development-emprunter-1-million-de-dai-~dollars-avec-un-flashloan-sur-aave/</link>
      <pubDate>Fri, 05 Nov 2021 09:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/smart-contract-development-emprunter-1-million-de-dai-~dollars-avec-un-flashloan-sur-aave/</guid>
      <description>Dans cet article nous allons voir comment réaliser un Flashloan sur Aave.  Nous allons emprunter $1 000 000 et le rembourser instantanément avec 0.09% de frais. Pour emprunter $1 000 000 et faire ce qu&amp;rsquo;on veut avec tant qu&amp;rsquo;il est remboursé dans la même transaction, on ne va payer que $900 d&amp;rsquo;intérêt&amp;hellip;
 Pour cet example, j&amp;rsquo;ai utilisé Node version: nvm use v14.17.6. J&amp;rsquo;ai aussi installé les modules NodeJS ganache-cli et truffle</description>
    </item>
    
    <item>
      <title>Smart contract development: Emprunter 1 million de DAI (~dollars) avec un flashloan sur DyDx</title>
      <link>https://leandeep.com/smart-contract-development-emprunter-1-million-de-dai-~dollars-avec-un-flashloan-sur-dydx/</link>
      <pubDate>Fri, 05 Nov 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/smart-contract-development-emprunter-1-million-de-dai-~dollars-avec-un-flashloan-sur-dydx/</guid>
      <description>Dans cet article nous allons voir comment réaliser un Flashloan sur DyDx.  Nous allons emprunter $1 000 000 et le rembourser instantanément avec des frais seulement de 2 wei. Crazy !
 Pour cet example, j&amp;rsquo;ai utilisé Node version: nvm use v14.17.6. J&amp;rsquo;ai aussi installé les modules NodeJS ganache-cli et truffle
  Création du Smart contract Créer un fichier SimpleDyDxFlashloan.sol dans le répertoire contracts/simple-dydx-flashloan de votre repo git et ajouter le contenu suivant:</description>
    </item>
    
    <item>
      <title>Smart contract development: coder un Swap sur Uniswap avec des data de prod</title>
      <link>https://leandeep.com/smart-contract-development-coder-un-swap-sur-uniswap-avec-des-data-de-prod/</link>
      <pubDate>Fri, 22 Oct 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/smart-contract-development-coder-un-swap-sur-uniswap-avec-des-data-de-prod/</guid>
      <description>Dans cet article nous allons voir comment réaliser un échange d&amp;rsquo;USDC avec de l&amp;rsquo;USDT en codant un smart contract qui utiliser Uniswap.
 Pour cet example, j&amp;rsquo;ai utilisé Node version: nvm use v14.17.6. J&amp;rsquo;ai aussi installé les modules NodeJS ganache-cli et truffle
  Création du Smart contract Créer un fichier SimpleUniswapSwap.sol dans le répertoire contracts de votre repo git et ajouter le contenu suivant:
// SPDX-License-Identifier: MIT pragma solidity ^0.</description>
    </item>
    
    <item>
      <title>Développement Solidity tuto 1 - Pragma</title>
      <link>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-1-pragma/</link>
      <pubDate>Fri, 10 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-1-pragma/</guid>
      <description>Les pragma permettent de spécifier la version du compiler pour Solidity
// SPDX-License-Identifier: MIT // La version doit être supérieure ou égale à 0.8.6 et inférieur à 0.9.0 pragma solidity ^0.8.6; contract HelloEthereum { string public greet = &amp;#34;Hello Solidity!&amp;#34;; } </description>
    </item>
    
    <item>
      <title>Développement Solidity tuto 2 - Contrat basique</title>
      <link>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-2-contrat-basique/</link>
      <pubDate>Fri, 10 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-2-contrat-basique/</guid>
      <description>Voici un exemple de smart contrat simple qui incrémente et décrémente le compteur count gardé en mémoire.
// SPDX-License-Identifier: MIT pragma solidity ^0.8.6; contract Counter { uint public count; // Fonction permettant d&amp;#39;obtenir la valeur du compteur count function get() public view returns (uint) { return count; } // Fonction qui incrémente count par 1 function inc() public { count += 1; } // Fonction qui décrémente count par 1 function dec() public { count -= 1; } } </description>
    </item>
    
    <item>
      <title>Développement Solidity tuto 3 - Type de données primitifs</title>
      <link>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-3-type-de-donn%C3%A9es-primitifs/</link>
      <pubDate>Fri, 10 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-3-type-de-donn%C3%A9es-primitifs/</guid>
      <description>Quelques types de primitifs:
 boolean uint int address  // SPDX-License-Identifier: MIT pragma solidity ^0.8.6; contract Primitives { bool public mon_bool = true; /* uint signifie unsigned integer, pour non negative integers Différente tailles sont disponibles uint8 varie de 0 à 2 ** 8 - 1 uint16 varie de 0 à 2 ** 16 - 1 ... uint256 varie de 0 à 2 ** 256 - 1 */ uint8 public u8 = 1; uint public u256 = 456; uint public u = 123; // uint est un alias pour uint256 /* Les nombres négatifs sont autorisés pour les types int.</description>
    </item>
    
    <item>
      <title>Créer son premier smart contract pour Ethereum</title>
      <link>https://leandeep.com/cr%C3%A9er-son-premier-smart-contract-pour-ethereum/</link>
      <pubDate>Sun, 06 Sep 2020 09:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/cr%C3%A9er-son-premier-smart-contract-pour-ethereum/</guid>
      <description>Installation des pré-requis Truffle npm install -g truffle  Ganache Option 1:
Rendez-vous à l&amp;rsquo;adresse http://truffleframework.com/ganache et cliquer sur le bouton &amp;ldquo;Download&amp;rdquo;.
Option 2:
Installation via le terminal
npm install ganache-cli -g puis démarrage du server Ganache via la commande:
ganache-cli -p 7545 -i 47 -l 4700000  Initialisation du projet  Il est possible d&amp;rsquo;initialiser son project avec la commande truffle init mais des boilerplates prêts à l&amp;rsquo;emploi existent.</description>
    </item>
    
    <item>
      <title>Solidity fondamentals</title>
      <link>https://leandeep.com/solidity-fondamentals/</link>
      <pubDate>Thu, 13 Feb 2020 16:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/solidity-fondamentals/</guid>
      <description>Remix IDE Remix (Orange buttons dans la partie interaction avec le smart contract de Remix -&amp;gt; it costs gas)
Remix IDE Doc
Remix Project
 Déployer son Smart Contract sur Rinkeby en sélectionnant injected Web3 et étant connecté à Metamask.
  Partager un dossier local avec remix Cloud IDE:
npm install -g @remix-project/remixd remixd -s &amp;lt;absolute-path-to-the-shared-folder&amp;gt; --remix-ide https://remix.ethereum.org   Faire tourner l&amp;rsquo;IDE Remix en local
git clone https://github.com/ethereum/remix-project.git cd remix-project yarn install yarn run build:libs nx build nx serve Open http://127.</description>
    </item>
    
  </channel>
</rss>
