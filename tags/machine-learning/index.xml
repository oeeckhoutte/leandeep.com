<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Machine Learning on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/machine-learning/</link>
    <description>Recent content in Machine Learning on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 29 Sep 2021 06:47:00 +0200</lastBuildDate><atom:link href="https://leandeep.com/tags/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Architecture applicative d&#39;une application AR Copy Paste</title>
      <link>https://leandeep.com/architecture-applicative-dune-application-ar-copy-paste/</link>
      <pubDate>Wed, 29 Sep 2021 06:47:00 +0200</pubDate>
      
      <guid>https://leandeep.com/architecture-applicative-dune-application-ar-copy-paste/</guid>
      <description>Introduction Peut-être êtes-vous tombé sur cette vidéo qui a fait le buzz sur Linkedin où l&amp;rsquo;on voyait une app mobile prendre une photo de n&amp;rsquo;importe quel objet, le détourait automatiquement et l&amp;rsquo;envoyait sur Photoshop. Le concept est appelé &amp;ldquo;AR Copy Paste&amp;rdquo;. Voici un article dédié au concept
J&amp;rsquo;ai été très impressionné par la démo et me suis demandé comment c&amp;rsquo;était fait. J&amp;rsquo;ai donc codé un MVP qui refait exactement la même chose (au delta près du plugin Photoshop qui n&amp;rsquo;est qu&amp;rsquo;un wrapper autour de mon app web qui affichait déjà mon image détourée).</description>
    </item>
    
    <item>
      <title>Calculs dans un réseau de neurones</title>
      <link>https://leandeep.com/calculs-dans-un-r%C3%A9seau-de-neurones/</link>
      <pubDate>Wed, 02 Dec 2020 23:52:00 +0000</pubDate>
      
      <guid>https://leandeep.com/calculs-dans-un-r%C3%A9seau-de-neurones/</guid>
      <description>Voici les 5 concepts de base d&amp;rsquo;un réseau de neurones.
Finalement un réseau de neurones n&amp;rsquo;est qu&amp;rsquo;une combinaison linéaire de fonctions non-linéaires.
Les calculs sont finalement très simples.</description>
    </item>
    
    <item>
      <title>Installer Tensorflow 2 avec GPU backend avec un eGPU, Kubuntu 20.04 et Docker</title>
      <link>https://leandeep.com/installer-tensorflow-2-avec-gpu-backend-avec-un-egpu-kubuntu-20.04-et-docker/</link>
      <pubDate>Sun, 15 Nov 2020 12:19:00 +0000</pubDate>
      
      <guid>https://leandeep.com/installer-tensorflow-2-avec-gpu-backend-avec-un-egpu-kubuntu-20.04-et-docker/</guid>
      <description>Dans deux articles précédents, nous avions vu comment installer Tensorflow 1 et 2 avec GPU support sur Ubuntu 18.04 avec une carte graphique Gefore GTX 1080 ou une plus ancienne carte plus supportée, la Geforce GTX 660 Ti.
 J&amp;rsquo;ai récemment fait un système upgrade et suis passé sur Kubuntu 20.04. Il est excellant et très stable, je le recommande grandement. Je suis toujours partisan des stations de Deep Learning personnelles (non dans le Cloud).</description>
    </item>
    
    <item>
      <title>Mettre en place un datahub pour organiser ses datasets</title>
      <link>https://leandeep.com/mettre-en-place-un-datahub-pour-organiser-ses-datasets/</link>
      <pubDate>Sat, 12 Sep 2020 19:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/mettre-en-place-un-datahub-pour-organiser-ses-datasets/</guid>
      <description>Introduction Dans cet article, nous allons créer voir comment créer un datahub pour organiser ses datasets. La solution open source que nous allons utiliser est CKAN. D&amp;rsquo;après leur site internet, il s&amp;rsquo;agit de &amp;ldquo;the world’s leading Open Source data portal platform&amp;rdquo;. Je ne sais pas si c&amp;rsquo;est vrai mais c&amp;rsquo;est utilisé par pas mal de sites institutionnels comme data.gouv (USA), opendata.swiss, Government of Canada, Berlin open data&amp;hellip; La solution est simple à installer et est très pratique.</description>
    </item>
    
    <item>
      <title>Installer ROS sur Ubuntu 18.04</title>
      <link>https://leandeep.com/installer-ros-sur-ubuntu-18.04/</link>
      <pubDate>Sun, 29 Mar 2020 16:01:00 +0200</pubDate>
      
      <guid>https://leandeep.com/installer-ros-sur-ubuntu-18.04/</guid>
      <description>Introduction Dans cet article nous allons voir comment installer ROS sur Ubuntu 18.04 et créer son workspace de travail.
 Installation sur Ubuntu directement (sans Docker) Installation de ROS Melodic
# Ajouter le repo ROS sudo sh -c &#39;echo &amp;quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&amp;quot; &amp;gt; /etc/apt/sources.list.d/ros-latest.list&#39; # Truster le repo ROS sudo apt-key adv --keyserver &#39;hkp://keyserver.ubuntu.com:80&#39; --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 sudo apt install ros-melodic-desktop-full  Installation de rosdep
sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential sudo rosdep init rosdep update  Ajout des variables d&amp;rsquo;environnement au terminal</description>
    </item>
    
    <item>
      <title>Classification avec Tensorflow 2</title>
      <link>https://leandeep.com/classification-avec-tensorflow-2/</link>
      <pubDate>Sat, 04 Jan 2020 18:12:00 +0200</pubDate>
      
      <guid>https://leandeep.com/classification-avec-tensorflow-2/</guid>
      <description>Introduction Dans cet article, nous allons entrainer un modèle à classifier les Iris avec 2 algorithmes différents présents dans Tensorflow 2:
 Régression logistique Gradient boosting  Nous allons utiliser le dataset opensource Iris.
 Attention l&amp;rsquo;algorithme &amp;ldquo;Régression logistique&amp;rdquo; prête à confusion. Même si le nom de cet algorithme contient régression, il permet de faire de la classification et donc de prédire une catégorie et non une valeur continue.
  Régression logistique Chargement des modules:</description>
    </item>
    
    <item>
      <title>Autonomous 3D printed car using Nvidia Jetson Nano and Torch</title>
      <link>https://leandeep.com/autonomous-3d-printed-car-using-nvidia-jetson-nano-and-torch/</link>
      <pubDate>Sun, 22 Dec 2019 11:16:00 +0000</pubDate>
      
      <guid>https://leandeep.com/autonomous-3d-printed-car-using-nvidia-jetson-nano-and-torch/</guid>
      <description>&lt;p&gt;Voici une de mes dernières réalisations.&lt;/p&gt;
&lt;p&gt;
    &lt;iframe 
        width=&#34;100%&#34; 
        height=&#34;400px&#34;
        src=&#34;//www.youtube.com/embed/yqyUBr11y00?autoplay=1&amp;mute=1&#34; 
        frameborder=&#34;0&#34; 
        allow=&#34;autoplay; encrypted-media&#34; 
        allowfullscreen&gt;
    &lt;/iframe&gt;


&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Premier modèle VAE avec Tensorflow 2</title>
      <link>https://leandeep.com/premier-mod%C3%A8le-vae-avec-tensorflow-2/</link>
      <pubDate>Fri, 20 Dec 2019 19:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/premier-mod%C3%A8le-vae-avec-tensorflow-2/</guid>
      <description>Introduction Dans cet article, nous allons créer un modèle VAE qui va nous aider à générer des nouveaux digits. Nous partirons du dataset MNIST. Chaque image de ce dataset est normalisée dans un cadre faisant 28x28 pixels.
 Variational Autoencoders (VAE) Chargement des modules
from __future__ import division, absolute_import, print_function, unicode_literals import tensorflow as tf import time import numpy as np import os import matplotlib.pyplot as plt import PIL import glob import imageio from IPython import display  Chargement du dataset MNIST:</description>
    </item>
    
    <item>
      <title>Régression linéaire avec Tensorflow 2</title>
      <link>https://leandeep.com/r%C3%A9gression-lin%C3%A9aire-avec-tensorflow-2/</link>
      <pubDate>Tue, 17 Dec 2019 19:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/r%C3%A9gression-lin%C3%A9aire-avec-tensorflow-2/</guid>
      <description>Introduction Pourquoi multiplier les framework Machine Learning quand on peut tout faire avec Tensorflow ? C&amp;rsquo;est une de mes reflexions du moment. Dans cet article, nous allons voir à quel point il est simple de faire une regression linéaire avec Tensorflow 2 avec le dataset Boston Housing.
 Régression linéaire Chargement des modules:
from __future__ import print_function, absolute_import, unicode_literals, division import tensorflow as tf import seaborn as sb import numpy as np import pandas as pd from tensorflow.</description>
    </item>
    
    <item>
      <title>Premier ConvNet avec Tensorflow 2</title>
      <link>https://leandeep.com/premier-convnet-avec-tensorflow-2/</link>
      <pubDate>Tue, 10 Dec 2019 19:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/premier-convnet-avec-tensorflow-2/</guid>
      <description>Introduction Tensorflow 2 beta est récemment sorti. Beaucoup de choses ont changé et il est maintenant beaucoup plus simple à utiliser. Keras a aussi été pleinement intégré. On peut l&amp;rsquo;utiliser pour des applications large-scale. Le graphe d&amp;rsquo;exécution est maintenant automatiquement créé par le framework. Le Python est converti est graphe. Dans cet article, nous allons créer un simple Convnet avec 3 couches en quelques lignes de codes pour se rendre compte à quel point l&amp;rsquo;utilisation de Tensorflow a été simplifiée.</description>
    </item>
    
  </channel>
</rss>
