<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python Tip on Bienvenue sur le site de Lean Deep</title>
    <link>https://leandeep.com/tags/python-tip/</link>
    <description>Recent content in Python Tip on Bienvenue sur le site de Lean Deep</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 09 May 2015 21:07:00 +0000</lastBuildDate><atom:link href="https://leandeep.com/tags/python-tip/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Conversion de structure de données à une autre</title>
      <link>https://leandeep.com/conversion-de-structure-de-donn%C3%A9es-%C3%A0-une-autre/</link>
      <pubDate>Sat, 09 May 2015 21:07:00 +0000</pubDate>
      
      <guid>https://leandeep.com/conversion-de-structure-de-donn%C3%A9es-%C3%A0-une-autre/</guid>
      <description>Lorsque l&amp;rsquo;on fait du preprocessing sur les données en Python, il est utile de transformer des structures de données en d&amp;rsquo;autres. Voici quelques snippets utiles:
Liste vers dictionnaire¶ list = [&amp;quot;lun&amp;quot;, &amp;quot;mer&amp;quot;, &amp;quot;mar&amp;quot;, &amp;quot;mer&amp;quot;, &amp;quot;jeu&amp;quot;, &amp;quot;jeu&amp;quot;] dict = {} for el in list: dict[e] = dict.get(el, 0) + 1 print(dict) {&#39;lun&#39;: 1, &#39;mer&#39;: 2, &#39;mar&#39;: 1, &#39;jeu&#39;: 2} L&amp;rsquo;usage de la méthode get regarde si une clé appartient au dictionnaire, retourne la valeur associée ou une valeur par défault dans le cas contraire.</description>
    </item>
    
    <item>
      <title>Les containers de données en Python</title>
      <link>https://leandeep.com/les-containers-de-donn%C3%A9es-en-python/</link>
      <pubDate>Sun, 03 May 2015 23:24:00 +0000</pubDate>
      
      <guid>https://leandeep.com/les-containers-de-donn%C3%A9es-en-python/</guid>
      <description>Python propose différents containers pour stocker des éléments. Voici les plus courants:
 list: tableau d’éléments indexés de 0 à n-1 auquel on peut ajouter ou retirer des éléments dict: tableau d’éléments indexés par des types immuables auquel on peut ajouter ou retirer des éléments tuple: tableau d’éléments indexés de 0 à n-1 qu’on ne peut pas modifier set: tableau d’éléments uniques non indexés frozenset: set immuables (non modifiable) deque: presque équivalent à une liste, la différence vient de l’implémentation, les mêmes opérations n’auront pas les mêmes coûts (deque = liste chaînée)  D’autres containers sont disponibles via le module collections.</description>
    </item>
    
  </channel>
</rss>
