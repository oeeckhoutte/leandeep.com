<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sklearn on Bienvenue sur le site de Lean Deep</title>
    <link>https://leandeep.com/tags/sklearn/</link>
    <description>Recent content in sklearn on Bienvenue sur le site de Lean Deep</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 04 Feb 2019 21:23:04 -0700</lastBuildDate><atom:link href="https://leandeep.com/tags/sklearn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Détecter les données aberrantes</title>
      <link>https://leandeep.com/d%C3%A9tecter-les-donn%C3%A9es-aberrantes/</link>
      <pubDate>Mon, 04 Feb 2019 21:23:04 -0700</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9tecter-les-donn%C3%A9es-aberrantes/</guid>
      <description>Pré-requis pip install numpy sklearn # va installer numpy 1.19.1 et sklearn 0.0  Charger les librairies import numpy as np from sklearn.covariance import EllipticEnvelope from sklearn.datasets import make_blobs  Créer un faux dataset # Create simulated data X, _ = make_blobs(n_samples = 10, n_features = 2, centers = 1, random_state = 1) # Remplace les valeurs de la première observation avec des données extrèmes X[0,0] = 10000 X[0,1] = 10000 Voici à quoi ressemble notre dataset composé de 10 observations:</description>
    </item>
    
  </channel>
</rss>
