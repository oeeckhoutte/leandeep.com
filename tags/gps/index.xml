<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GPS on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/gps/</link>
    <description>Recent content in GPS on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 08 Apr 2025 20:49:00 +0200</lastBuildDate><atom:link href="https://leandeep.com/tags/gps/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scan Wifi networks via ESP32 using Rust</title>
      <link>https://leandeep.com/scan-wifi-networks-via-esp32-using-rust/</link>
      <pubDate>Tue, 08 Apr 2025 20:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/scan-wifi-networks-via-esp32-using-rust/</guid>
      <description>In this article we are going to see how to scan Wifi networks around you.
The crates used are the following ones:
[dependencies] log = &amp;#34;0.4&amp;#34; esp-idf-svc = { version = &amp;#34;0.51&amp;#34;, features = [&amp;#34;critical-section&amp;#34;, &amp;#34;embassy-time-driver&amp;#34;, &amp;#34;embassy-sync&amp;#34;] } esp-idf-hal = &amp;#34;0.45.2&amp;#34; use esp_idf_hal::prelude::*; use esp_idf_svc::eventloop::EspSystemEventLoop; use esp_idf_svc::nvs::EspDefaultNvsPartition; use esp_idf_svc::sys::EspError; use esp_idf_svc::wifi::{AuthMethod, BlockingWifi, ClientConfiguration, Configuration, EspWifi}; use std::thread; use std::time::Duration; fn main() -&amp;gt; Result&amp;lt;(), EspError&amp;gt; { esp_idf_svc::sys::link_patches(); esp_idf_svc::log::EspLogger::initialize_default(); log::set_max_level(log::LevelFilter::Info); log::info!(&amp;#34;Program started!&amp;#34;); // Init needed components let peripherals = Peripherals::take().</description>
    </item>
    
    <item>
      <title>Get GPS coordinates on ESP32 using basic Arduino code</title>
      <link>https://leandeep.com/get-gps-coordinates-on-esp32-using-basic-arduino-code/</link>
      <pubDate>Wed, 02 Apr 2025 20:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/get-gps-coordinates-on-esp32-using-basic-arduino-code/</guid>
      <description>In this article we are going to see how to retrieve NMEA sentences from a GPS module NEO-6M connected to an ESP32.
Connect the NEO-6M GPS module to the ESP32 Then create an Arduino program and deploy it to the ESP-wroom-32.
arduino-cli sketch new arduino-gps cd arduino-gps/ Edit the arduino-gps.ino file and add the following content:
#define RXD2 16 #define TXD2 17 #define GPS_BAUD 9600 // Create an instance of the HardwareSerial class for Serial 2 HardwareSerial gpsSerial(2); void setup(){ // Serial Monitor Serial.</description>
    </item>
    
    <item>
      <title>Get GPS coordinates on ESP32 using Rust</title>
      <link>https://leandeep.com/get-gps-coordinates-on-esp32-using-rust/</link>
      <pubDate>Wed, 02 Apr 2025 20:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/get-gps-coordinates-on-esp32-using-rust/</guid>
      <description>In this article we are going to see how to retrieve NMEA sentences from a GPS module NEO-6M connected to an ESP32.
Connect the NEO-6M GPS module to the ESP32 Dependencies:
esp-idf-svc = { version = &amp;#34;0.51&amp;#34;, features = [&amp;#34;critical-section&amp;#34;, &amp;#34;embassy-time-driver&amp;#34;, &amp;#34;embassy-sync&amp;#34;] } esp-idf-hal = &amp;#34;0.45.2&amp;#34; use esp_idf_hal::peripherals::Peripherals; use esp_idf_hal::prelude::*; use esp_idf_hal::uart::*; use esp_idf_svc::hal::uart::config::DataBits; use esp_idf_svc::hal::uart::config::StopBits; fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; { // Lien des patches ESP-IDF esp_idf_svc::sys::link_patches(); // Configuration du logger esp_idf_svc::log::EspLogger::initialize_default(); log::info!</description>
    </item>
    
  </channel>
</rss>
