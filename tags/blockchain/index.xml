<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blockchain on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/blockchain/</link>
    <description>Recent content in Blockchain on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 10 Sep 2021 08:08:00 +0000</lastBuildDate><atom:link href="https://leandeep.com/tags/blockchain/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Développement Solidity tuto 1 - Pragma</title>
      <link>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-1-pragma/</link>
      <pubDate>Fri, 10 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-1-pragma/</guid>
      <description>Les pragma permettent de spécifier la version du compiler pour Solidity
// SPDX-License-Identifier: MIT // La version doit être supérieure ou égale à 0.8.6 et inférieur à 0.9.0 pragma solidity ^0.8.6; contract HelloEthereum { string public greet = &amp;quot;Hello Solidity!&amp;quot;; } </description>
    </item>
    
    <item>
      <title>Développement Solidity tuto 2 - Contrat basique</title>
      <link>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-2-contrat-basique/</link>
      <pubDate>Fri, 10 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-2-contrat-basique/</guid>
      <description>Voici un exemple de smart contrat simple qui incrémente et décrémente le compteur count gardé en mémoire.
// SPDX-License-Identifier: MIT pragma solidity ^0.8.6; contract Counter { uint public count; // Fonction permettant d&#39;obtenir la valeur du compteur count function get() public view returns (uint) { return count; } // Fonction qui incrémente count par 1 function inc() public { count += 1; } // Fonction qui décrémente count par 1 function dec() public { count -= 1; } } </description>
    </item>
    
    <item>
      <title>Développement Solidity tuto 3 - Type de données primitifs</title>
      <link>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-3-type-de-donn%C3%A9es-primitifs/</link>
      <pubDate>Fri, 10 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-3-type-de-donn%C3%A9es-primitifs/</guid>
      <description>Quelques types de primitifs:
 boolean uint int address  // SPDX-License-Identifier: MIT pragma solidity ^0.8.6; contract Primitives { bool public mon_bool = true; /* uint signifie unsigned integer, pour non negative integers Différente tailles sont disponibles uint8 varie de 0 à 2 ** 8 - 1 uint16 varie de 0 à 2 ** 16 - 1 ... uint256 varie de 0 à 2 ** 256 - 1 */ uint8 public u8 = 1; uint public u256 = 456; uint public u = 123; // uint est un alias pour uint256 /* Les nombres négatifs sont autorisés pour les types int.</description>
    </item>
    
    <item>
      <title>Switcher de Truffle Ganache à Hardhat</title>
      <link>https://leandeep.com/switcher-de-truffle-ganache-%C3%A0-hardhat/</link>
      <pubDate>Tue, 07 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/switcher-de-truffle-ganache-%C3%A0-hardhat/</guid>
      <description>Introduction Dans cet article nous allons voir comment utiliser Hardhat pour démarrer une blockchain locale (fork du réseau mainnet) et pour compiler et déployer son code Solidity. Nous verrons aussi comment avoir une explorer type etherscan local.
 Pré-requis  nvm Créer un compte ethernal sur https://app.tryethernal.com/ Compte alchemyapi (concurrent infura ou autre full node)   Installation nvm install v14.17.6 nvm use v14.17.6 nvm use default v14.17.6 npm install ethernal -g ethernal login npm install --save-dev hardhat npm i --save-dev hardhat-ethernal npm i --save-dev @nomiclabs/hardhat-waffle  Démarrer votre blockchain en local npx hardhat node --fork https://eth-mainnet.</description>
    </item>
    
    <item>
      <title>Pas assez de gaz pour développer sur Ethereum</title>
      <link>https://leandeep.com/pas-assez-de-gaz-pour-d%C3%A9velopper-sur-ethereum/</link>
      <pubDate>Mon, 06 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/pas-assez-de-gaz-pour-d%C3%A9velopper-sur-ethereum/</guid>
      <description>Introduction Voici un tip pour éviter de devoir attendre 24h avant de pouvoir réclamer des Keth via les Faucets de Kovan. Sans cela, et lorsque vous avez brulé tout votre capital à force de tester sans cesse votre code, c&amp;rsquo;est très compliqué d&amp;rsquo;avancer et d&amp;rsquo;achever le développement de son smart contract Solidity (ou dApps web3). On perd du temps alors qu&amp;rsquo;on n&amp;rsquo;est même pas en prod&amp;hellip;
Ce tip permet de s&amp;rsquo;affranchir temporairement de l&amp;rsquo;erreur suivante: {&#39;code&#39;: -32010, &#39;message&#39;: &#39;Insufficient funds.</description>
    </item>
    
    <item>
      <title>Faire tourner un noeud Nervos Network</title>
      <link>https://leandeep.com/faire-tourner-un-noeud-nervos-network/</link>
      <pubDate>Fri, 13 Aug 2021 09:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/faire-tourner-un-noeud-nervos-network/</guid>
      <description>Ce court article décrit comment faire tourner un noeud Nervos Network testnet sur Ubuntu 20.04.
 Noeud sur Aggron Installation du CKB Node
mkdir -p nervos cd ./nervos curl -LO https://github.com/nervosnetwork/ckb/releases/download/v0.43.1/ckb_v0.43.1_x86_64-unknown-linux-gnu.tar.gz tar xzf ckb_v0.43.1_x86_64-unknown-linux-gnu.tar.gz mv ckb_v0.43.1_x86_64-unknown-linux-gnu ckb_v0.43.1 cd ckb_v0.43.1 ./ckb init --chain testnet  Installation du CKB Indexer
cd ./nervos mkdir ckb-indexer-0.2.1/ cd ckb-indexer-0.2.1/ curl -LO https://github.com/nervosnetwork/ckb-indexer/releases/download/v0.2.1/ckb-indexer-0.2.1-linux.zip unzip ckb-indexer-0.2.1-linux.zip tar xzf ckb-indexer-linux-x86_64.tar.gz RUST_LOG=info ./ckb-indexer -s ./indexer-data  Vérifier que le noeud est bien synchronisé en comparant les blocks avec les derniers trouvés dans l&amp;rsquo;explorer https://explorer.</description>
    </item>
    
    <item>
      <title>Faire tourner un noeud Polygon Matic</title>
      <link>https://leandeep.com/faire-tourner-un-noeud-polygon-matic/</link>
      <pubDate>Fri, 16 Jul 2021 11:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/faire-tourner-un-noeud-polygon-matic/</guid>
      <description>Ou comment diviser par 5000 ses frais de gas Si comme moi vous tradiez sur le réseau Ethereum mais que les frais de transactions sont venus rogner votre marge, vous devriez passer sur Polygon&amp;hellip; Il y a 1 an tout rond, il était encore possible de réaliser des transactions avec des gaz fees de max 1.50 / $2 mais maintenant ce n&amp;rsquo;est plus possible du tout. La solution, passer sur d&amp;rsquo;autres réseaux comme Tron, BSC ou encore Polygon.</description>
    </item>
    
    <item>
      <title>Créer des NFTs sur Ethereum</title>
      <link>https://leandeep.com/cr%C3%A9er-des-nfts-sur-ethereum/</link>
      <pubDate>Fri, 11 Jun 2021 15:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/cr%C3%A9er-des-nfts-sur-ethereum/</guid>
      <description>Dans cet article, nous allons voir comment créer des NFT sur Ethereum en utilisant le projet Python Brownie. L&amp;rsquo;ensemble du tutorial a été réalisé avec Python 3.8. NodeJS sera également nécessaire pour installer Ganache. Dans cet article, j&amp;rsquo;ai utilisé la v10.23.3 ainsi qu&amp;rsquo;NPM 6.14.11.
 Qu&amp;rsquo;est-ce que Brownie ? Similaire au framework Truffle, Brownie permet de développer, tester et déployer des Smart Contracts. A la différence de Truffle, il est écrit en Python 3.</description>
    </item>
    
    <item>
      <title>Faire tourner un noeud Binance Smart Chain</title>
      <link>https://leandeep.com/faire-tourner-un-noeud-binance-smart-chain/</link>
      <pubDate>Sat, 24 Apr 2021 21:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/faire-tourner-un-noeud-binance-smart-chain/</guid>
      <description>Ce court article décrit comment faire tourner un noeud BSC (Binance Smart Chain) sur une machine Linux
 Mainnet mkdir ~/bsc &amp;amp;&amp;amp; cd $_ wget https://github.com/binance-chain/bsc/releases/download/v1.0.7/geth_linux wget $(curl -s https://api.github.com/repos/binance-chain/bsc/releases/latest |grep browser_ |grep mainnet |cut -d\&amp;quot; -f4) mv ./geth_linux ./geth_bsc # Note: you can eventually move the binary to /usr/bin/ sudo chmod +x ./geth_bsc ./geth_bsc --datadir node init genesis.json # Start the full Node ./geth_bsc --config ./config.toml --datadir ./node --pprofaddr 0.</description>
    </item>
    
    <item>
      <title>The cutest dog of the InterPlanetary File System</title>
      <link>https://leandeep.com/the-cutest-dog-of-the-interplanetary-file-system/</link>
      <pubDate>Sat, 10 Apr 2021 20:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/the-cutest-dog-of-the-interplanetary-file-system/</guid>
      <description>Tout est dans le titre. Si vous ne connaissez pas IFPS https://ipfs.io/, je vous recommande d&amp;rsquo;aller jeter un oeil !
Image URL - https://ipfs.io/ipfs/QmXY8DnCiHncVyhUPYd4wdXYdb6x94qqRv4GL7P4kKDKFf?filename=fauve.jpg  Extrait Wikipédia
 Le navigateur Brave a ajouté le support à ce protocole: https://brave.com/ipfs-support/
 Extinction du daemon (photo toujours accessible) et optimisation
J&amp;rsquo;ai éteint le daemon IPFS qui tourait sur mon Mac, vidé mon cache et rechargé cette page et la photo de mon chien est toujours accessible.</description>
    </item>
    
  </channel>
</rss>
