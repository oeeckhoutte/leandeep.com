<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blockchain on Lean Deep Tech blog</title>
    <link>https://leandeep.com/tags/blockchain/</link>
    <description>Recent content in Blockchain on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 05 Nov 2021 09:08:00 +0000</lastBuildDate><atom:link href="https://leandeep.com/tags/blockchain/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Smart contract development: Emprunter 1 million de DAI (~dollars) avec un flashloan sur Aave</title>
      <link>https://leandeep.com/smart-contract-development-emprunter-1-million-de-dai-~dollars-avec-un-flashloan-sur-aave/</link>
      <pubDate>Fri, 05 Nov 2021 09:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/smart-contract-development-emprunter-1-million-de-dai-~dollars-avec-un-flashloan-sur-aave/</guid>
      <description>Dans cet article nous allons voir comment réaliser un Flashloan sur Aave.  Nous allons emprunter $1 000 000 et le rembourser instantanément avec 0.09% de frais. Pour emprunter $1 000 000 et faire ce qu&amp;rsquo;on veut avec tant qu&amp;rsquo;il est remboursé dans la même transaction, on ne va payer que $900 d&amp;rsquo;intérêt&amp;hellip;
 Pour cet example, j&amp;rsquo;ai utilisé Node version: nvm use v14.17.6. J&amp;rsquo;ai aussi installé les modules NodeJS ganache-cli et truffle</description>
    </item>
    
    <item>
      <title>Smart contract development: Emprunter 1 million de DAI (~dollars) avec un flashloan sur DyDx</title>
      <link>https://leandeep.com/smart-contract-development-emprunter-1-million-de-dai-~dollars-avec-un-flashloan-sur-dydx/</link>
      <pubDate>Fri, 05 Nov 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/smart-contract-development-emprunter-1-million-de-dai-~dollars-avec-un-flashloan-sur-dydx/</guid>
      <description>Dans cet article nous allons voir comment réaliser un Flashloan sur DyDx.  Nous allons emprunter $1 000 000 et le rembourser instantanément avec des frais seulement de 2 wei. Crazy !
 Pour cet example, j&amp;rsquo;ai utilisé Node version: nvm use v14.17.6. J&amp;rsquo;ai aussi installé les modules NodeJS ganache-cli et truffle
  Création du Smart contract Créer un fichier SimpleDyDxFlashloan.sol dans le répertoire contracts/simple-dydx-flashloan de votre repo git et ajouter le contenu suivant:</description>
    </item>
    
    <item>
      <title>DeFi Resources</title>
      <link>https://leandeep.com/defi-resources/</link>
      <pubDate>Thu, 04 Nov 2021 09:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/defi-resources/</guid>
      <description>DeFi https://defillama.com/
 NFT https://cryptoslam.io/
 Public RPC Arbitrum (Mainnet Beta)
 https://arb1.arbitrum.io/rpc Name: Arbitrum One ChainID: 42161 Currency Symbol: ETH   </description>
    </item>
    
    <item>
      <title>Smart contract development: coder un Swap sur Uniswap avec des data de prod</title>
      <link>https://leandeep.com/smart-contract-development-coder-un-swap-sur-uniswap-avec-des-data-de-prod/</link>
      <pubDate>Fri, 22 Oct 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/smart-contract-development-coder-un-swap-sur-uniswap-avec-des-data-de-prod/</guid>
      <description>Dans cet article nous allons voir comment réaliser un échange d&amp;rsquo;USDC avec de l&amp;rsquo;USDT en codant un smart contract qui utiliser Uniswap.
 Pour cet example, j&amp;rsquo;ai utilisé Node version: nvm use v14.17.6. J&amp;rsquo;ai aussi installé les modules NodeJS ganache-cli et truffle
  Création du Smart contract Créer un fichier SimpleUniswapSwap.sol dans le répertoire contracts de votre repo git et ajouter le contenu suivant:
// SPDX-License-Identifier: MIT pragma solidity ^0.</description>
    </item>
    
    <item>
      <title>Développement Solidity tuto 1 - Pragma</title>
      <link>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-1-pragma/</link>
      <pubDate>Fri, 10 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-1-pragma/</guid>
      <description>Les pragma permettent de spécifier la version du compiler pour Solidity
// SPDX-License-Identifier: MIT // La version doit être supérieure ou égale à 0.8.6 et inférieur à 0.9.0 pragma solidity ^0.8.6; contract HelloEthereum { string public greet = &amp;quot;Hello Solidity!&amp;quot;; } </description>
    </item>
    
    <item>
      <title>Développement Solidity tuto 2 - Contrat basique</title>
      <link>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-2-contrat-basique/</link>
      <pubDate>Fri, 10 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-2-contrat-basique/</guid>
      <description>Voici un exemple de smart contrat simple qui incrémente et décrémente le compteur count gardé en mémoire.
// SPDX-License-Identifier: MIT pragma solidity ^0.8.6; contract Counter { uint public count; // Fonction permettant d&#39;obtenir la valeur du compteur count function get() public view returns (uint) { return count; } // Fonction qui incrémente count par 1 function inc() public { count += 1; } // Fonction qui décrémente count par 1 function dec() public { count -= 1; } } </description>
    </item>
    
    <item>
      <title>Développement Solidity tuto 3 - Type de données primitifs</title>
      <link>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-3-type-de-donn%C3%A9es-primitifs/</link>
      <pubDate>Fri, 10 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-3-type-de-donn%C3%A9es-primitifs/</guid>
      <description>Quelques types de primitifs:
 boolean uint int address  // SPDX-License-Identifier: MIT pragma solidity ^0.8.6; contract Primitives { bool public mon_bool = true; /* uint signifie unsigned integer, pour non negative integers Différente tailles sont disponibles uint8 varie de 0 à 2 ** 8 - 1 uint16 varie de 0 à 2 ** 16 - 1 ... uint256 varie de 0 à 2 ** 256 - 1 */ uint8 public u8 = 1; uint public u256 = 456; uint public u = 123; // uint est un alias pour uint256 /* Les nombres négatifs sont autorisés pour les types int.</description>
    </item>
    
    <item>
      <title>Switcher de Truffle Ganache à Hardhat</title>
      <link>https://leandeep.com/switcher-de-truffle-ganache-%C3%A0-hardhat/</link>
      <pubDate>Tue, 07 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/switcher-de-truffle-ganache-%C3%A0-hardhat/</guid>
      <description>Introduction Dans cet article nous allons voir comment utiliser Hardhat pour démarrer une blockchain locale (fork du réseau mainnet) et pour compiler et déployer son code Solidity. Nous verrons aussi comment avoir une explorer type etherscan local.
 Pré-requis  nvm Créer un compte ethernal sur https://app.tryethernal.com/ Compte alchemyapi (concurrent infura ou autre full node)   Installation nvm install v14.17.6 nvm use v14.17.6 nvm use default v14.17.6 npm install ethernal -g ethernal login npm install --save-dev hardhat npm i --save-dev hardhat-ethernal npm i --save-dev @nomiclabs/hardhat-waffle  Démarrer votre blockchain en local npx hardhat node --fork https://eth-mainnet.</description>
    </item>
    
    <item>
      <title>Pas assez de gaz pour développer sur Ethereum</title>
      <link>https://leandeep.com/pas-assez-de-gaz-pour-d%C3%A9velopper-sur-ethereum/</link>
      <pubDate>Mon, 06 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/pas-assez-de-gaz-pour-d%C3%A9velopper-sur-ethereum/</guid>
      <description>Introduction Voici un tip pour éviter de devoir attendre 24h avant de pouvoir réclamer des Keth via les Faucets de Kovan. Sans cela, et lorsque vous avez brulé tout votre capital à force de tester sans cesse votre code, c&amp;rsquo;est très compliqué d&amp;rsquo;avancer et d&amp;rsquo;achever le développement de son smart contract Solidity (ou dApps web3). On perd du temps alors qu&amp;rsquo;on n&amp;rsquo;est même pas en prod&amp;hellip;
Ce tip permet de s&amp;rsquo;affranchir temporairement de l&amp;rsquo;erreur suivante: {&#39;code&#39;: -32010, &#39;message&#39;: &#39;Insufficient funds.</description>
    </item>
    
    <item>
      <title>Faire tourner un noeud Nervos Network</title>
      <link>https://leandeep.com/faire-tourner-un-noeud-nervos-network/</link>
      <pubDate>Fri, 13 Aug 2021 09:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/faire-tourner-un-noeud-nervos-network/</guid>
      <description>Ce court article décrit comment faire tourner un noeud Nervos Network testnet sur Ubuntu 20.04.
 Noeud sur Aggron Installation du CKB Node
mkdir -p nervos cd ./nervos curl -LO https://github.com/nervosnetwork/ckb/releases/download/v0.43.1/ckb_v0.43.1_x86_64-unknown-linux-gnu.tar.gz tar xzf ckb_v0.43.1_x86_64-unknown-linux-gnu.tar.gz mv ckb_v0.43.1_x86_64-unknown-linux-gnu ckb_v0.43.1 cd ckb_v0.43.1 ./ckb init --chain testnet  Installation du CKB Indexer
cd ./nervos mkdir ckb-indexer-0.2.1/ cd ckb-indexer-0.2.1/ curl -LO https://github.com/nervosnetwork/ckb-indexer/releases/download/v0.2.1/ckb-indexer-0.2.1-linux.zip unzip ckb-indexer-0.2.1-linux.zip tar xzf ckb-indexer-linux-x86_64.tar.gz RUST_LOG=info ./ckb-indexer -s ./indexer-data  Vérifier que le noeud est bien synchronisé en comparant les blocks avec les derniers trouvés dans l&amp;rsquo;explorer https://explorer.</description>
    </item>
    
  </channel>
</rss>
