<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lean Deep Tech blog</title>
    <link>https://leandeep.com/</link>
    <description>Recent content on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 02 Jul 2025 22:32:00 +0200</lastBuildDate><atom:link href="https://leandeep.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Première utilisation de Nix et setup Postgres</title>
      <link>https://leandeep.com/premi%C3%A8re-utilisation-de-nix-et-setup-postgres/</link>
      <pubDate>Wed, 02 Jul 2025 22:32:00 +0200</pubDate>
      
      <guid>https://leandeep.com/premi%C3%A8re-utilisation-de-nix-et-setup-postgres/</guid>
      <description>Petite précision, c&amp;rsquo;est un setup sur Mac avec processeur ARM.
Setup Nix sur OSX sh &amp;lt;(curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -L https://nixos.org/nix/install)\n source ~/.zshrc mkdir ~/.config/nix echo &amp;#34;experimental-features = nix-command flakes&amp;#34; &amp;gt;&amp;gt; ~/.config/nix/nix.conf Setup PG Créer un fichier nix/flake.nix dans votre repo git et ajouter le contenu suivant:
Option 1
{ description = &amp;#34;Environnement de développement PostgreSQL&amp;#34;; inputs = { nixpkgs.url = &amp;#34;github:NixOS/nixpkgs/nixpkgs-unstable&amp;#34;; flake-utils.url = &amp;#34;github:numtide/flake-utils&amp;#34;; }; outputs = { self, nixpkgs, flake-utils }: flake-utils.</description>
    </item>
    
    <item>
      <title>Using AI and IoT to Safely Automate Fireplace Fire Starting</title>
      <link>https://leandeep.com/using-ai-and-iot-to-safely-automate-fireplace-fire-starting/</link>
      <pubDate>Mon, 09 Jun 2025 22:32:00 +0200</pubDate>
      
      <guid>https://leandeep.com/using-ai-and-iot-to-safely-automate-fireplace-fire-starting/</guid>
      <description>I&amp;rsquo;m currently building an IoT device that will automatically start fires in my traditional chimney at scheduled times during cold winter days. The idea is to start a fire one hour before I wake up, while I&amp;rsquo;m still asleep, to warm up the house. Unlike a smart stove, a traditional fireplace can&amp;rsquo;t be controlled remotely. It’s old-school with a twist of AI, code, and electronics. Everything is getting automated! Here are the first two videos showing the progress of my side project.</description>
    </item>
    
    <item>
      <title>Install Nostr Rust relay without Docker</title>
      <link>https://leandeep.com/install-nostr-rust-relay-without-docker/</link>
      <pubDate>Sun, 04 May 2025 23:32:00 +0200</pubDate>
      
      <guid>https://leandeep.com/install-nostr-rust-relay-without-docker/</guid>
      <description>In this article we are going to see how to setup a Nostr relay without Docker.
Prerequisites
rust installed (else curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh) Run Nostr relay without Docker
sudo apt-get install build-essential cmake protobuf-compiler pkg-config libssl-dev git clone -q https://git.sr.ht/\~gheartsfield/nostr-rs-relay cd nostr-rs-relay cargo build -q -r RUST_LOG=warn,nostr_rs_relay=info ./target/release/nostr-rs-relay And voila the relay will listen on port 8080.</description>
    </item>
    
    <item>
      <title>Utiliser Ollama sur Ubuntu 22 via Docker et faire du LLM scraping</title>
      <link>https://leandeep.com/utiliser-ollama-sur-ubuntu-22-via-docker-et-faire-du-llm-scraping/</link>
      <pubDate>Sun, 04 May 2025 23:32:00 +0200</pubDate>
      
      <guid>https://leandeep.com/utiliser-ollama-sur-ubuntu-22-via-docker-et-faire-du-llm-scraping/</guid>
      <description>Dans cet article, nous allons voir comment utiliser Ollama sur Ubuntu 22 via Docker tout en tirant parti du GPU connecté au serveur dans le but de faire du scraping en posant des questions à son LLM auto-hébergé.
Pré-requis
nvidia-smi déjà installé Cuda installé Docker installé Installation du NVIDIA Container Toolkit
sudo apt install -y nvidia-container-toolkit sudo nvidia-ctk runtime configure --runtime=docker sudo systemctl restart docker # Vérification docker run --rm --gpus all nvidia/cuda:12.</description>
    </item>
    
    <item>
      <title>Identify path to stop docker compose</title>
      <link>https://leandeep.com/identify-path-to-stop-docker-compose/</link>
      <pubDate>Mon, 28 Apr 2025 23:40:00 +0000</pubDate>
      
      <guid>https://leandeep.com/identify-path-to-stop-docker-compose/</guid>
      <description>Very quick tip on how to identify the directory from which a docker compose command was launched (as the standard docker ps output doesn&amp;rsquo;t show it).
# Retrieve container ID docker ps docker inspect \ --format=&amp;#39;{{ index .Config.Labels &amp;#34;com.docker.compose.project.working_dir&amp;#34; }}&amp;#39; \ 0e6194178cf0 /Users/olivier/Dev/Leandeep/Rust/test_app/leptos_pg </description>
    </item>
    
    <item>
      <title>Access Raspberry Pi Camera using Python and OpenCV</title>
      <link>https://leandeep.com/access-raspberry-pi-camera-using-python-and-opencv/</link>
      <pubDate>Mon, 28 Apr 2025 21:55:00 +0200</pubDate>
      
      <guid>https://leandeep.com/access-raspberry-pi-camera-using-python-and-opencv/</guid>
      <description>In this article we are going to see how to install OpenCV on a Raspberry PI using Bookworm.
Prerequisites Install dependencies on Raspberry Pi
sudo apt update sudo apt install python3-picamera2 sudo apt install libcamera-apps sudo apt install python3-opencv Install dependencies on Macbook
pip install opencv-python numpy Code import cv2 import numpy as np import time from datetime import datetime import os # ========================== # CONSTANTS (Configuration) # ========================== BLUR_SIZE = (7, 7) # Larger → less sensitive (e.</description>
    </item>
    
    <item>
      <title>H-Bridge L298N with Raspberry Pi and Python</title>
      <link>https://leandeep.com/h-bridge-l298n-with-raspberry-pi-and-python/</link>
      <pubDate>Mon, 28 Apr 2025 21:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/h-bridge-l298n-with-raspberry-pi-and-python/</guid>
      <description>In the article we are going to see how to control a H-bridge L298N connected to a Raspberry Pi using Python.
Prerequisites Connect the bridge L298N to the raspberry pi
Connect the pin IN1 of the L298N to GPIO7 (pin 26) of the Raspberry Pi (so GPIO4). Connect the pin IN2 of the L298N to GPIO8 (pin 24) of the Raspberry Pi. Connect the pin ENA of the L298N to GPIO25 (pin 22) of the Raspberry Pi.</description>
    </item>
    
    <item>
      <title>Use an Oled display on ESP32 using Arduino</title>
      <link>https://leandeep.com/use-an-oled-display-on-esp32-using-arduino/</link>
      <pubDate>Thu, 17 Apr 2025 22:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/use-an-oled-display-on-esp32-using-arduino/</guid>
      <description>In this article we are going to see how to connect and display some content on an Oled display connected via I2C on an ESP-Wroom-32. The code is written in Arduino code.
Prerequisites Install Arduino libraries:
Adafruit SSD1306 Adafruit GFX Library Connect the Oled display to the ESP32 board:
Voici le branchement I2C entre ton ESP32 et l’écran :
It is an OLED (NFP1315-61AY)
Connect VCC to 3.3V Of course connect GND to GND Connect SCL to GPIO22 Connect SDA to GPIO21 Code #include &amp;lt;Wire.</description>
    </item>
    
    <item>
      <title>Use an Oled display on ESP32 using Rust</title>
      <link>https://leandeep.com/use-an-oled-display-on-esp32-using-rust/</link>
      <pubDate>Thu, 17 Apr 2025 22:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/use-an-oled-display-on-esp32-using-rust/</guid>
      <description>In this article we are going to see how to connect and display some content on an Oled display connected via I2C on an ESP-Wroom-32. The code is written in Rust.
Prerequisites Connect the Oled display to the ESP32 board:
Voici le branchement I2C entre ton ESP32 et l’écran :
It is an OLED (NFP1315-61AY)
Connect VCC to 3.3V Of course connect GND to GND Connect SCL to GPIO22 Connect SDA to GPIO21 Dependencies [dependencies] log = &amp;#34;0.</description>
    </item>
    
    <item>
      <title>Read and write file in sdcard from ESP32 and Rust</title>
      <link>https://leandeep.com/read-and-write-file-in-sdcard-from-esp32-and-rust/</link>
      <pubDate>Sun, 13 Apr 2025 22:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/read-and-write-file-in-sdcard-from-esp32-and-rust/</guid>
      <description>In this article we are going to see how to read a file from a SD Card in Rust using the SPI port of the ESP32.
Prerequisites cargo install esp-generate@0.3.1 esp-generate --chip esp32 sd source ~/export-esp.sh cargo build # espflash flash target/xtensa-esp32-none-elf/debug/sd --monitor Dependencies [dependencies] critical-section = &amp;#34;1.2.0&amp;#34; embassy-executor = { version = &amp;#34;0.7.0&amp;#34;, features = [&amp;#34;task-arena-size-20480&amp;#34;] } embassy-time = { version = &amp;#34;0.4.0&amp;#34;, features = [&amp;#34;generic-queue-8&amp;#34;] } esp-hal = { version = &amp;#34;1.</description>
    </item>
    
  </channel>
</rss>
