<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lean Deep Tech blog</title>
    <link>https://leandeep.com/</link>
    <description>Recent content on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 28 Mar 2025 15:49:00 +0200</lastBuildDate><atom:link href="https://leandeep.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Connect ESP32 to wifi network using Rust</title>
      <link>https://leandeep.com/connect-esp32-to-wifi-network-using-rust/</link>
      <pubDate>Fri, 28 Mar 2025 15:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/connect-esp32-to-wifi-network-using-rust/</guid>
      <description>Prerequisites [dependencies] log = &amp;#34;0.4&amp;#34; anyhow = &amp;#34;1&amp;#34; embedded-svc = { version = &amp;#34;0.28&amp;#34;, default-features = false } esp-idf-svc = { version = &amp;#34;0.51&amp;#34;, features = [&amp;#34;critical-section&amp;#34;, &amp;#34;embassy-time-driver&amp;#34;, &amp;#34;embassy-sync&amp;#34;] } Code Now update main.rs and add this code:
use core::convert::TryInto; use embedded_svc::wifi::{AuthMethod, ClientConfiguration, Configuration}; use esp_idf_svc::hal::prelude::Peripherals; use esp_idf_svc::log::EspLogger; use esp_idf_svc::wifi::{BlockingWifi, EspWifi}; use esp_idf_svc::{eventloop::EspSystemEventLoop, nvs::EspDefaultNvsPartition}; use log::info; const SSID: &amp;amp;str = &amp;#34;SSID&amp;#34;; const PASSWORD: &amp;amp;str = &amp;#34;password&amp;#34;; fn main() -&amp;gt; anyhow::Result&amp;lt;()&amp;gt; { esp_idf_svc::sys::link_patches(); EspLogger::initialize_default(); let peripherals = Peripherals::take()?</description>
    </item>
    
    <item>
      <title>Power on a PC when a button is pushed on an ESP32 using Rust</title>
      <link>https://leandeep.com/power-on-a-pc-when-a-button-is-pushed-on-an-esp32-using-rust/</link>
      <pubDate>Fri, 28 Mar 2025 15:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/power-on-a-pc-when-a-button-is-pushed-on-an-esp32-using-rust/</guid>
      <description>Prerequisites [dependencies] log = &amp;#34;0.4&amp;#34; anyhow = &amp;#34;1&amp;#34; embedded-svc = { version = &amp;#34;0.28&amp;#34;, default-features = false } esp-idf-svc = { version = &amp;#34;0.51&amp;#34;, features = [&amp;#34;critical-section&amp;#34;, &amp;#34;embassy-time-driver&amp;#34;, &amp;#34;embassy-sync&amp;#34;] } esp-idf-hal = &amp;#34;0.45.2&amp;#34; Code Now update main.rs and add this code:
use core::convert::TryInto; use embedded_svc::wifi::{AuthMethod, ClientConfiguration, Configuration}; //use esp_idf_svc::hal::prelude::Peripherals; use esp_idf_svc::log::EspLogger; use esp_idf_svc::wifi::{BlockingWifi, EspWifi}; use esp_idf_svc::{eventloop::EspSystemEventLoop, nvs::EspDefaultNvsPartition}; use log::info; use std::net::{UdpSocket, Ipv4Addr, SocketAddrV4}; use std::time::Duration; use esp_idf_hal::delay::FreeRtos; use esp_idf_hal::gpio::PinDriver; use esp_idf_hal::peripherals::Peripherals; const SSID: &amp;amp;str = &amp;#34;.</description>
    </item>
    
    <item>
      <title>Switch on a LED using Rust when a button is pushed on ESP32</title>
      <link>https://leandeep.com/switch-on-a-led-using-rust-when-a-button-is-pushed-on-esp32/</link>
      <pubDate>Fri, 28 Mar 2025 14:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/switch-on-a-led-using-rust-when-a-button-is-pushed-on-esp32/</guid>
      <description>The idea of this article is to explore how to switch on a LED when a push button is pressed. Once it is release the LED is switched off.
Prerequisites [dependencies] log = &amp;#34;0.4&amp;#34; esp-idf-svc = { version = &amp;#34;0.51&amp;#34;, features = [&amp;#34;critical-section&amp;#34;, &amp;#34;embassy-time-driver&amp;#34;, &amp;#34;embassy-sync&amp;#34;] } esp-idf-hal = &amp;#34;0.45.2&amp;#34; Code Now update main.rs and add this code:
use esp_idf_hal::delay::FreeRtos; use esp_idf_hal::gpio::PinDriver; use esp_idf_hal::peripherals::Peripherals; fn main() -&amp;gt; ! { esp_idf_svc::sys::link_patches(); // Bind the log crate to the ESP Logging facilities esp_idf_svc::log::EspLogger::initialize_default(); log::info!</description>
    </item>
    
    <item>
      <title>Make onboard LED blink using Rust on ESP32</title>
      <link>https://leandeep.com/make-onboard-led-blink-using-rust-on-esp32/</link>
      <pubDate>Fri, 28 Mar 2025 11:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/make-onboard-led-blink-using-rust-on-esp32/</guid>
      <description>AI tools are awesome. Lately, I&amp;rsquo;ve been wondering if they could replace us developers, but actually no it&amp;rsquo;s impossible because you always have issues. However, it&amp;rsquo;s crazy how much they boost my productivity. I now do my research directly on LLMs and get answers much faster than if I had searched on Google myself. It&amp;rsquo;s fantastic!
In this new article, we will explore how to make an onboard LED blink on an ESP32 using Rust.</description>
    </item>
    
    <item>
      <title>Installer code server sur Ubuntu 22</title>
      <link>https://leandeep.com/installer-code-server-sur-ubuntu-22/</link>
      <pubDate>Fri, 28 Mar 2025 10:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/installer-code-server-sur-ubuntu-22/</guid>
      <description>Dans cet article très court, nous allons voir comment installer code-server sur Ubuntu 22. Code-server est un vscode en remote.
Installation Rendez-vous sur https://github.com/coder/code-server/releases pour sélectionner la version que vous souhaitez installer.
export VERSION=4.98.2 curl -fOL https://github.com/coder/code-server/releases/download/v$VERSION/code-server-$VERSION-amd64.rpm sudo rpm -i code-server-$VERSION-amd64.rpm sudo systemctl enable --now code-server@$USER Configuration Editer le fichier de config ~/.config/code-server/config.yaml pour activer l&amp;rsquo;utilisation d&amp;rsquo;un certificat HTTPS (même en local) et récupérez le mot de passe d&amp;rsquo;accès à votre instance code-server.</description>
    </item>
    
    <item>
      <title>Installer Arduino cli Ubuntu 22</title>
      <link>https://leandeep.com/installer-arduino-cli-ubuntu-22/</link>
      <pubDate>Fri, 28 Mar 2025 09:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/installer-arduino-cli-ubuntu-22/</guid>
      <description>Dans ce nouvel article très court, nous allons voir comment créer un projet Arduino, le compiler et le déployer sur un ESP en ligne de commande.
Installation mkdir -p ~/local/bin curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR=~/local/bin sh echo &amp;#39;export PATH=&amp;#34;$HOME/local/bin:$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc source ~/.bashrc arduino-cli version arduino-cli core update-index arduino-cli core install esp32:esp32 arduino-cli sketch new mon_projet_esp32_arduino arduino-cli compile --fqbn esp32:esp32:esp32 mon_projet_esp32_arduino arduino-cli upload -p /dev/ttyUSB0 --fqbn esp32:esp32:esp32 mon_projet_esp32_arduino Test Ouvrir le projet Arduino mon_projet_esp32_arduino et modifier le fichier .</description>
    </item>
    
    <item>
      <title>Run Rust code on ESP32</title>
      <link>https://leandeep.com/run-rust-code-on-esp32/</link>
      <pubDate>Mon, 24 Mar 2025 22:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/run-rust-code-on-esp32/</guid>
      <description>In this brief article, we will explore how to set up the ESP32 development environment to build and run Rust code on the ESP-WROOM-32. This procedure is written to work on Ubuntu 22 with a 64-bit Intel processor. The ESP32 is connected to the PC via USB.
Installation Install Ubuntu packages
sudo apt install -y build-essential libssl-dev pkg-config git sudo apt install -y python3-pip python3-venv Configure USB permissions
sudo usermod -aG dialout $USER sudo usermod -aG tty $USER # Restart the session Install Rust</description>
    </item>
    
    <item>
      <title>Installer quickemu sur Ubuntu 22.04</title>
      <link>https://leandeep.com/installer-quickemu-sur-ubuntu-22.04/</link>
      <pubDate>Fri, 07 Feb 2025 07:32:00 +0200</pubDate>
      
      <guid>https://leandeep.com/installer-quickemu-sur-ubuntu-22.04/</guid>
      <description>Dans cet article, nous allons voir comment installer Quickemu sur Ubuntu 22.04 pour créer des VM sur Ubuntu.
Installation de quickemu
# check if python3 is installed # python3 --version # sudo apt install python3 # si nécessaire sudo apt install qemu bash coreutils ovmf grep jq lsb procps genisoimage usbutils util-linux sed spice-client-gtk swtpm wget xdg-user-dirs zsync unzip sudo apt-add-repository ppa:flexiondotorg/quickemu sudo apt update sudo apt install quickemu Installation du GUI</description>
    </item>
    
    <item>
      <title>Installer Hashcat sur Ubuntu 22.04</title>
      <link>https://leandeep.com/installer-hashcat-sur-ubuntu-22.04/</link>
      <pubDate>Thu, 06 Feb 2025 23:32:00 +0200</pubDate>
      
      <guid>https://leandeep.com/installer-hashcat-sur-ubuntu-22.04/</guid>
      <description>Dans cet article, nous allons voir comment installer Hashcat v6.2.5 sur Ubuntu 22 (PopOS).
Pré-requis
nvidia-smi déjà installé.
Installation de hashcat
sudo apt update sudo apt upgrade apt install hashcat Installation de Cuda Toolkit 11.7
wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_515.43.04_linux.run sudo sh cuda_11.7.0_515.43.04_linux.run # Installer Cuda et refuser l&amp;#39;installation du Driver Nvidia # Une fois l&amp;#39;installation terminée, ajouter cuda au bashrc echo &amp;#34;export PATH=/usr/local/cuda-11.7/bin:$PATH&amp;#34; &amp;gt;&amp;gt; ~/.bashrc echo &amp;#34;export LD_LIBRARY_PATH=/usr/local/cuda-11.7/lib64:$LD_LIBRARY_PATH&amp;#34; &amp;gt;&amp;gt; ~/.bashrc Vérification
nvcc --version hashcat -I Test de crack du MD5 suivant: 82a4b202be22fbbcd236d2f65988acde pour vérifier que les GPUs sont ok.</description>
    </item>
    
    <item>
      <title>Installer Hashcat sur Fedora 41</title>
      <link>https://leandeep.com/installer-hashcat-sur-fedora-41/</link>
      <pubDate>Sat, 25 Jan 2025 22:32:00 +0200</pubDate>
      
      <guid>https://leandeep.com/installer-hashcat-sur-fedora-41/</guid>
      <description>Installation
sudo dnf install hashcat hashcat-devel hashcat-doc Vérifier si votre GPU est détecté
hashcat -I Réaliser un benchmark
hashcat -b Faire un test avec un hash MD5
wget -c https://github.com/danielmiessler/SecLists/archive/master.zip -O SecList.zip \ &amp;amp;&amp;amp; unzip SecList.zip \ &amp;amp;&amp;amp; rm -f SecList.zip echo &amp;#34;5d41402abc4b2a76b9719d911017c592&amp;#34; &amp;gt; test.hash hashcat -m 0 -a 0 test.hash ~/Dev/SecLists-master/Passwords/xato-net-10-million-passwords-1000000.txt </description>
    </item>
    
  </channel>
</rss>
