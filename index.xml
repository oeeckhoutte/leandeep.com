<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lean Deep Tech blog</title>
    <link>https://leandeep.com/</link>
    <description>Recent content on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 22 May 2023 23:16:00 +0000</lastBuildDate><atom:link href="https://leandeep.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Présentation - Retour d&#39;expérience DevOps</title>
      <link>https://leandeep.com/pr%C3%A9sentation-retour-dexp%C3%A9rience-devops/</link>
      <pubDate>Mon, 22 May 2023 23:16:00 +0000</pubDate>
      
      <guid>https://leandeep.com/pr%C3%A9sentation-retour-dexp%C3%A9rience-devops/</guid>
      <description>&lt;p&gt;Voici une présentation dans laquelle je fais un Retour d&amp;rsquo;Expérience sur ce que nous avons mis en place côté DevOps chez mon dernier client.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/dwd1w9HcPY0RQX&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;485&#34;
        width=&#34;595&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;</description>
    </item>
    
    <item>
      <title>Décoder une string HTML encoded en ligne de commande</title>
      <link>https://leandeep.com/d%C3%A9coder-une-string-html-encoded-en-ligne-de-commande/</link>
      <pubDate>Wed, 03 May 2023 07:00:00 +0200</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9coder-une-string-html-encoded-en-ligne-de-commande/</guid>
      <description>Tip du jour pour rapidement convertir une string HTML encoded via le terminal.
Pré-requis brew install recode Commande echo &amp;#34;string&amp;amp;#32;&amp;amp;#35;1&amp;amp;#46;&amp;#34; | recode html..ascii </description>
    </item>
    
    <item>
      <title>Installer Kafka sur Kubernetes</title>
      <link>https://leandeep.com/installer-kafka-sur-kubernetes/</link>
      <pubDate>Mon, 03 Apr 2023 22:13:00 +0000</pubDate>
      
      <guid>https://leandeep.com/installer-kafka-sur-kubernetes/</guid>
      <description>Introduction Dans cet article très rapide, nous allons voir comment installer Kafka (et Zookeeper) sur Kubernetes (ou avoir une version pour développer en local)
Installation de l&amp;rsquo;opérateur Strimzi kubectl create namespace kafka kubectl create -f &amp;#39;https://strimzi.io/install/latest?namespace=kafka&amp;#39; -n kafka kubectl get pod -n kafka --watch kubectl logs deployment/strimzi-cluster-operator -n kafka -f Création du cluster kubectl apply -f https://strimzi.io/examples/latest/kafka/kafka-persistent-single.yaml -n kafka kubectl wait kafka/my-cluster --for=condition=Ready --timeout=300s -n kafka Envoyer et recevoir des messages # Envoyer kubectl -n kafka run kafka-producer -ti --image=quay.</description>
    </item>
    
    <item>
      <title>Switcher entre releases Erigon</title>
      <link>https://leandeep.com/switcher-entre-releases-erigon/</link>
      <pubDate>Sat, 18 Feb 2023 07:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/switcher-entre-releases-erigon/</guid>
      <description>J&amp;rsquo;ai déjà écrit plusieurs articles très similaires sur le sujet. Cette procédure décrit comment rapidement switcher de release Erigon pour tester une nouvelle feature ou vérifier qu&amp;rsquo;un fix fonctionne bien. En gros, cela me permet de switcher de release en release avec Erigon.
Voir l&amp;rsquo;article suivant pour une full installation.
Bien sûr commencer par un backup. Voir cet article
Erigon build mkdir /root/erigon_release_2_38_1/ cd /root/erigon_release_2_38_1/ git clone https://github.com/ledgerwatch/erigon.git cd erigon git checkout 52fd6d60e180a267e99a25662f169797570e356e make erigon make rpcdaemon Création du service</description>
    </item>
    
    <item>
      <title>Bonnes résines pour maxi dureté en impression 3D</title>
      <link>https://leandeep.com/bonnes-r%C3%A9sines-pour-maxi-duret%C3%A9-en-impression-3d/</link>
      <pubDate>Tue, 14 Feb 2023 07:00:00 +0200</pubDate>
      
      <guid>https://leandeep.com/bonnes-r%C3%A9sines-pour-maxi-duret%C3%A9-en-impression-3d/</guid>
      <description>Petit tip un peu différent. Voici une petite liste de bonnes résines à utiliser pour l&amp;rsquo;impression 3D. Ces résines sont un bon compromis entre facilité d&amp;rsquo;impression, dureté, résistence à la chaleur et prix:
Les liens ne sont pas des liens d&amp;rsquo;affiliation. Je fais 0 pub, mets 0 cookie et fais 0 tracking sur ce blog type &amp;ldquo;personal notes&amp;rdquo;.
SirayaTech Build (le top du top et surtout pour des pièces qui nécessitent une résistence à la chaleur.</description>
    </item>
    
    <item>
      <title>Phases de synchronisation sur Erigon et liens vers l&#39;architecture</title>
      <link>https://leandeep.com/phases-de-synchronisation-sur-erigon-et-liens-vers-larchitecture/</link>
      <pubDate>Tue, 14 Feb 2023 07:00:00 +0200</pubDate>
      
      <guid>https://leandeep.com/phases-de-synchronisation-sur-erigon-et-liens-vers-larchitecture/</guid>
      <description>Steps de synchronisation sur Erigon var ( Snapshots SyncStage = &amp;#34;Snapshots&amp;#34; // Snapshots Headers SyncStage = &amp;#34;Headers&amp;#34; // Headers are downloaded, their Proof-Of-Work validity and chaining is verified CumulativeIndex SyncStage = &amp;#34;CumulativeIndex&amp;#34; // Calculate how much gas has been used up to each block. BlockHashes SyncStage = &amp;#34;BlockHashes&amp;#34; // Headers Number are written, fills blockHash =&amp;gt; number bucket Bodies SyncStage = &amp;#34;Bodies&amp;#34; // Block bodies are downloaded, TxHash and UncleHash are getting verified Senders SyncStage = &amp;#34;Senders&amp;#34; // &amp;#34;From&amp;#34; recovered from signatures, bodies re-written Execution SyncStage = &amp;#34;Execution&amp;#34; // Executing each block w/o buildinf a trie Translation SyncStage = &amp;#34;Translation&amp;#34; // Translation each marked for translation contract (from EVM to TEVM) VerkleTrie SyncStage = &amp;#34;VerkleTrie&amp;#34; IntermediateHashes SyncStage = &amp;#34;IntermediateHashes&amp;#34; // Generate intermediate hashes, calculate the state root hash HashState SyncStage = &amp;#34;HashState&amp;#34; // Apply Keccak256 to all the keys in the state AccountHistoryIndex SyncStage = &amp;#34;AccountHistoryIndex&amp;#34; // Generating history index for accounts StorageHistoryIndex SyncStage = &amp;#34;StorageHistoryIndex&amp;#34; // Generating history index for storage LogIndex SyncStage = &amp;#34;LogIndex&amp;#34; // Generating logs index (from receipts) CallTraces SyncStage = &amp;#34;CallTraces&amp;#34; // Generating call traces index TxLookup SyncStage = &amp;#34;TxLookup&amp;#34; // Generating transactions lookup index Finish SyncStage = &amp;#34;Finish&amp;#34; // Nominal stage after all other stages MiningCreateBlock SyncStage = &amp;#34;MiningCreateBlock&amp;#34; MiningExecution SyncStage = &amp;#34;MiningExecution&amp;#34; MiningFinish SyncStage = &amp;#34;MiningFinish&amp;#34; // Beacon chain stages BeaconHistoryReconstruction SyncStage = &amp;#34;BeaconHistoryReconstruction&amp;#34; // BeaconHistoryReconstruction reconstruct missing history.</description>
    </item>
    
    <item>
      <title>Backuper la DB d&#39;Erigon sur Debian 11</title>
      <link>https://leandeep.com/backuper-la-db-derigon-sur-debian-11/</link>
      <pubDate>Fri, 03 Feb 2023 07:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/backuper-la-db-derigon-sur-debian-11/</guid>
      <description>Pour backuper les data de votre Node Erigon, rien de tel qu&amp;rsquo;un disque externe. Après minimum une semaine de synchronisation rien de tel qu&amp;rsquo;un petit backup si vous devez restaurer votre système. Dans mon cas, je dois passer d&amp;rsquo;Erigon 2.36 à une version 2.37 forkée avec un dev perso permettant d&amp;rsquo;ajouter un endpoint RPC non disponible dans l&amp;rsquo;API de base. Comme je ne suis pas certain que mon dev est 100% safe car c&amp;rsquo;est mon premier développement sur un client Ethereum, je préfère faire un backup de ma DB.</description>
    </item>
    
    <item>
      <title>Créer un dataset avec les données Binance OHLCV pour réaliser des backtests</title>
      <link>https://leandeep.com/cr%C3%A9er-un-dataset-avec-les-donn%C3%A9es-binance-ohlcv-pour-r%C3%A9aliser-des-backtests/</link>
      <pubDate>Fri, 27 Jan 2023 10:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/cr%C3%A9er-un-dataset-avec-les-donn%C3%A9es-binance-ohlcv-pour-r%C3%A9aliser-des-backtests/</guid>
      <description>Sans utiliser la librairie CCTX dont j&amp;rsquo;ai parlé dans l&amp;rsquo;article, voici comment récupérer directement les données OHLCV depuis l&amp;rsquo;API de Binance:
import requests import datetime import pandas as pd import numpy as np start_date = &amp;#34;2022-01-01&amp;#34; end_date = &amp;#34;2022-01-31&amp;#34; interval = &amp;#34;1m&amp;#34; symbol = &amp;#34;BTCUSDT&amp;#34; def get_binance_data( ticker: str, interval: str = &amp;#34;4h&amp;#34;, limit: int = 500, start: str = &amp;#34;2018-01-01 00:00:00&amp;#34;, ) -&amp;gt; pd.DataFrame: &amp;#34;&amp;#34;&amp;#34;Get X (limit) OHLCV entries from Binance&amp;#34;&amp;#34;&amp;#34; columns = [ &amp;#34;open_time&amp;#34;, &amp;#34;open&amp;#34;, &amp;#34;high&amp;#34;, &amp;#34;low&amp;#34;, &amp;#34;close&amp;#34;, &amp;#34;volume&amp;#34;, &amp;#34;close_time&amp;#34;, &amp;#34;qav&amp;#34;, &amp;#34;num_trades&amp;#34;, &amp;#34;taker_base_vol&amp;#34;, &amp;#34;taker_quote_vol&amp;#34;, &amp;#34;ignore&amp;#34;, ] start = int(datetime.</description>
    </item>
    
    <item>
      <title>Installer InfluxDB 2 sur Debian 11</title>
      <link>https://leandeep.com/installer-influxdb-2-sur-debian-11/</link>
      <pubDate>Fri, 27 Jan 2023 09:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/installer-influxdb-2-sur-debian-11/</guid>
      <description>Dans cet article très court, nous allons voir comment installer InfluxDB 2 via Docker sur Debian 11.
Installation de Docker apt install docker.io curl -L &amp;#34;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose On active ensuite le service:
systemctl enable docker systemctl start docker Installation d&amp;rsquo;InfluxDB Une fois Docker et docker-compose installés, on peut créer nos fichiers docker-compose.yml, influx.env et telegraf.conf.
Contenu du fichier docker-compose.yml:
version: &amp;#39;3&amp;#39; services: influxdb: image: influxdb:2.</description>
    </item>
    
    <item>
      <title>Erigon full node sur Debian 11</title>
      <link>https://leandeep.com/erigon-full-node-sur-debian-11/</link>
      <pubDate>Fri, 27 Jan 2023 07:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/erigon-full-node-sur-debian-11/</guid>
      <description>Installation des pré-requis Installation de go
wget https://dl.google.com/go/go1.19.5.linux-amd64.tar.gz tar -C /usr/local -xzf go1.19.5.linux-amd64.tar.gz Editer /root/bashrc et ajouter les commandes suivantes
export PATH=$PATH:/usr/local/go/bin export GOPATH=&amp;#34;${HOME}/.go/bin&amp;#34; export PATH=$GOPATH:$PATH Autres outils et consensus mechanism
# Prevent Debian sleep or hibernation systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target apt vim curl install git make supervisor build-essential software-properties-common net-tools jq mkdir -p ethereum/consensus/prysm cd $_ curl https://raw.githubusercontent.com/prysmaticlabs/prysm/master/prysm.sh --output prysm.sh &amp;amp;&amp;amp; chmod +x prysm.sh Ouvrir le fichier /root/.</description>
    </item>
    
  </channel>
</rss>
