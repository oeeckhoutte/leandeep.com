<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lean Deep Tech blog</title>
    <link>https://leandeep.com/</link>
    <description>Recent content on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 23 Oct 2022 07:49:00 +0200</lastBuildDate><atom:link href="https://leandeep.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust pour développeurs Python</title>
      <link>https://leandeep.com/rust-pour-d%C3%A9veloppeurs-python/</link>
      <pubDate>Sun, 23 Oct 2022 07:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/rust-pour-d%C3%A9veloppeurs-python/</guid>
      <description>Petit guide rapide pour les Pythonistas souhaitant devenir Rustaceans.
Python 1. Conventions et guidelines PEP8 2. Tooling requirements.txt setup.py PyPI pip setuptools &amp; poetry pour distribuer des libs pipenv pour la gestion des dépendances twine pour uploader un package venv pour isoler un env pyenv pour gérer ≠ versions de Python pydoc &amp; Sphinx pour générer la doc Python pour interpréter/ compiler ipython comme REPL ipdb pour debugguer 3. Librairies et frameworks urllib requests json pyYAML csv datetime &amp; dateutils click &amp; argparse docopt re subprocess multiprocessing logging pathlib pickle heapq flask cryptography pymongo jinja2 pyside pytest Flake8 Black itertools celery boto 4.</description>
    </item>
    
    <item>
      <title>Proxies HTTP et SOCKS via gcloud</title>
      <link>https://leandeep.com/proxies-http-et-socks-via-gcloud/</link>
      <pubDate>Fri, 23 Sep 2022 09:22:00 +0000</pubDate>
      
      <guid>https://leandeep.com/proxies-http-et-socks-via-gcloud/</guid>
      <description>Introduction Dans cet article très rapide nous allons voir comment créer une proxy SOCKS ou HTTP via une instance Google Cloud. On va juste utiliser le cli gcloud et un binaire open source.
Lancement du proxy Socks cd PATH_TO_GCLOUD_SI_PAS_DANS_$PATH export PORT_DU_PROXY= ./gcloud compute ssh NOM_DE_VOTRE_INSTANCE --project NOM_DE_VOTRE_PROJET --zone LA_ZONE_QUI_CONTIENT_VOTRE_INSTANCE --ssh-flag=&amp;#34;-D&amp;#34; --ssh-flag=&amp;#34;$PORT_DU_PROXY&amp;#34; --ssh-flag=&amp;#34;-N&amp;#34; Vérification curl --socks5 127.0.0.1:$PORT_DU_PROXY https://ipinfo.io/ip
Besoin d&amp;rsquo;un proxy http ? Pas de souci, vous pouvez utiliser le projet Rust suivant https://github.</description>
    </item>
    
    <item>
      <title>Noeud RPC Ethereum après The Merge sur Ubuntu 22.04</title>
      <link>https://leandeep.com/noeud-rpc-ethereum-apr%C3%A8s-the-merge-sur-ubuntu-22.04/</link>
      <pubDate>Thu, 15 Sep 2022 04:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/noeud-rpc-ethereum-apr%C3%A8s-the-merge-sur-ubuntu-22.04/</guid>
      <description>Introduction Dans cet article, nous allons voir comment hoster un noeud relais pour Ethereum mainnet après The Merge avec Nethermind sur Ubuntu 22.04.
Cette procédure a été écrite très rapidement quelques heures après la release de The Merge pour remettre d&amp;rsquo;aplomb mes bots de trading. Désolé d&amp;rsquo;avance si des erreurs se sont glissées dans cet article.
Installation On télécharge Nethermind:
mkdir -p /data/eth2-mainnet/{consensus,execution} cd /data/eth2-mainnet/execution wget https://github.com/NethermindEth/nethermind/archive/refs/tags/1.13.6.zip unzip 1.13.6.zip On installe le client pour le consensus POS:</description>
    </item>
    
    <item>
      <title>Noeud Ethereum Nethermind sur Ubuntu 22.04</title>
      <link>https://leandeep.com/noeud-ethereum-nethermind-sur-ubuntu-22.04/</link>
      <pubDate>Sun, 14 Aug 2022 23:49:00 +0200</pubDate>
      
      <guid>https://leandeep.com/noeud-ethereum-nethermind-sur-ubuntu-22.04/</guid>
      <description>Introduction Dans cet article, nous allons voir comment hoster un noeud light Ethereum mainnet avec Nethermind sur Ubuntu 22.04.
Installation On commence par installer .NET:
sudo add-apt-repository ppa:nethermindeth/nethermind sudo apt install nethermind Ensuite on installer Nethermind:
sudo add-apt-repository ppa:nethermindeth/nethermind sudo apt install nethermind Configuration On créer un répertoire qui contiendra nos data:
mkdir -p /data/eth-mainnet-nethermind On édite le fichier de configuration /usr/share/nethermind/configs/mainnet.cfg et on autorise les IPs, modules qui nous intéressent.</description>
    </item>
    
    <item>
      <title>Installer Docker et mitmproxy sur Ubuntu 22.04</title>
      <link>https://leandeep.com/installer-docker-et-mitmproxy-sur-ubuntu-22.04/</link>
      <pubDate>Mon, 01 Aug 2022 20:59:00 +0000</pubDate>
      
      <guid>https://leandeep.com/installer-docker-et-mitmproxy-sur-ubuntu-22.04/</guid>
      <description>Tips très très rapide montrant comment installer Docker et Mitmproxy sur Ubuntu 22.04.
Installation de Docker sur Ubuntu 22.04 sudo apt update sudo apt install -y ca-certificates curl gnupg lsb-release curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo &amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&amp;#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null sudo apt-get update sudo apt install docker-ce docker-ce-cli containerd.io -y sudo usermod -aG docker $USER newgrp docker Vérification de l&amp;rsquo;installation de Docker docker version Démarrage du proxy mitm sur VM distante tmux docker run --rm -it -v ~/.</description>
    </item>
    
    <item>
      <title>Blog headless avec édition de contenu sur Ghost app</title>
      <link>https://leandeep.com/blog-headless-avec-%C3%A9dition-de-contenu-sur-ghost-app/</link>
      <pubDate>Sun, 31 Jul 2022 21:13:00 +0000</pubDate>
      
      <guid>https://leandeep.com/blog-headless-avec-%C3%A9dition-de-contenu-sur-ghost-app/</guid>
      <description>Introduction Dans cet article, nous allons voir comment créer un blog headless à partir de Ghost en moins de 5 minutes. Des bonnes performances (pas de rendering nécessaire), pas besoin de serveur payant (juste un hosting de static content) et on garde la simplicité d&amp;rsquo;édition (authoring) via Ghost.
Installer Ghost npm install ghost-cli@latest -g Démarrer/créer un blog ghost ghost install local Nouveau thème Télécharger le fichier zip contenant un thème custom: https://github.</description>
    </item>
    
    <item>
      <title>Installer Argo workflow sur OSX</title>
      <link>https://leandeep.com/installer-argo-workflow-sur-osx/</link>
      <pubDate>Tue, 26 Jul 2022 22:13:00 +0000</pubDate>
      
      <guid>https://leandeep.com/installer-argo-workflow-sur-osx/</guid>
      <description>Introduction Dans cet article, nous allons voir comment installer Argo workflow localement sur OSX. Il s&amp;rsquo;agit d&amp;rsquo;une installation très simple utilisant Docker-desktop et Kubernetes. Cette installation n&amp;rsquo;est pas recommandée pour de la production. Elle permet de tester et d&amp;rsquo;évaluer l&amp;rsquo;outil ou de simplement créer/développer des workflows depuis votre poste local.
Installer Argo Cli curl -sLO https://github.com/argoproj/argo-workflows/releases/download/v3.2.6/argo-darwin-amd64.gz gunzip argo-darwin-amd64.gz chmod +x argo-darwin-amd64 mv ./argo-darwin-amd64 /usr/local/bin/argo argo version Déploiement d&amp;rsquo;Argo sur k8s kubectl create ns argo kubectl apply -n argo -f https://raw.</description>
    </item>
    
    <item>
      <title>Autres Blockchains et RPC nodes</title>
      <link>https://leandeep.com/autres-blockchains-et-rpc-nodes/</link>
      <pubDate>Fri, 15 Jul 2022 09:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/autres-blockchains-et-rpc-nodes/</guid>
      <description>Algorand Aurora Cronos KuCoin Near IoTeX Tezos Theta (soon) TomoChain Algorand Providers
Pocket Network - https://mainnet.portal.pokt.network Quicknode - https://www.quicknode.com/ Own node
https://developer.algorand.org/docs/run-a-node/setup/install/ Aurora Providers
Infura - https://infura.io Public Endpoints
https://mainnet.aurora.dev Own node
https://doc.aurora.dev/#running-your-own-aurora-node Cronos Public Endpoints
https://rpc.artemisone.org/cronos https://evm.cronos.org/ https://rpc.vvs.finance/ https://rpc.crodex.app/ https://mmf-rpc.xstaking.sg https://gateway.nebkas.ro/ Chain Id 25
Currency CRO
Explorer
https://cronos.org/explorer/ KuCoin Public Endpoints
https://rpc-mainnet.kcc.network/ Own node
https://docs.kcc.io/#/en-us/?id=node Near Providers
ANKR - https://ankr.com Infura - https://infura.io Public Endpoints
https://rpc.ankr.com/near https://near.public-rpc.com Own node</description>
    </item>
    
    <item>
      <title>Utiliser Erigon pour ses Nodes sur Ubuntu 20.04</title>
      <link>https://leandeep.com/utiliser-erigon-pour-ses-nodes-sur-ubuntu-20.04/</link>
      <pubDate>Tue, 12 Jul 2022 21:03:00 +0000</pubDate>
      
      <guid>https://leandeep.com/utiliser-erigon-pour-ses-nodes-sur-ubuntu-20.04/</guid>
      <description>Installation Go wget https://dl.google.com/go/go1.18.linux-amd64.tar.gz sudo tar -C /usr/local -xzf go1.18.linux-amd64.tar.gz Editer ~/.profile et ajouter les commandes suivantes
export PATH=$PATH:/usr/local/go/bin export GOPATH=&amp;#34;${HOME}/.go/bin&amp;#34; export PATH=$GOPATH:$PATH source ~/.profile go version Installation Erigon cd /data/ git clone git clone --recurse-submodules -j8 https://github.com/ledgerwatch/erigon.git cd erigon make erigon Run Polygon
mkdir /data/bor-mainnet ./build/bin/erigon --datadir=&amp;#34;/data/bor-mainnet&amp;#34; --chain=bor-mainnet --port=30303 --http.port=8545 --torrent.port=42069 --private.api.addr=127.0.0.1:9090 --http --ws --http.api=eth,debug,net,trace,web3,erigon BSC
Archive Node:
mkdir /data/bsc ./build/bin/erigon --datadir=&amp;#34;/data/bsc&amp;#34; --chain=bsc --port=30303 --http.port=8545 --torrent.port=42069 --private.api.addr=127.0.0.1:9090 --http --ws --http.</description>
    </item>
    
    <item>
      <title>Installer ZeroTier sur Ubuntu 20.04</title>
      <link>https://leandeep.com/installer-zerotier-sur-ubuntu-20.04/</link>
      <pubDate>Tue, 12 Jul 2022 20:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/installer-zerotier-sur-ubuntu-20.04/</guid>
      <description>Installation curl -s https://install.zerotier.com | sudo bash curl -s &amp;#39;https://raw.githubusercontent.com/zerotier/ZeroTierOne/master/doc/contact%40zerotier.com.gpg&amp;#39; | gpg --import &amp;amp;&amp;amp; \ if z=$(curl -s &amp;#39;https://install.zerotier.com/&amp;#39; | gpg); then echo &amp;#34;$z&amp;#34; | sudo bash; fi sudo apt update sudo apt install -y zerotier-one Configuration Récupérer votre network_id sur https://my.zerotier.com/ puis connecter votre serveur à votre réseau.
sudo zerotier-cli join &amp;lt;network_id&amp;gt; Retourner sur https://my.zerotier.com/ pour autoriser le nouveau noeud ajouté à accéder à votre réseau.
Editer /etc/ssh/sshd_config et remplacer ListenAddress 0.</description>
    </item>
    
  </channel>
</rss>
