<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lean Deep Tech blog</title>
    <link>https://leandeep.com/</link>
    <description>Recent content on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 30 Oct 2021 17:53:00 +0000</lastBuildDate><atom:link href="https://leandeep.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installer Unifi Controller sur Ubuntu 20.04</title>
      <link>https://leandeep.com/installer-unifi-controller-sur-ubuntu-20.04/</link>
      <pubDate>Sat, 30 Oct 2021 17:53:00 +0000</pubDate>
      
      <guid>https://leandeep.com/installer-unifi-controller-sur-ubuntu-20.04/</guid>
      <description>Dans cet article, nous allons voir comment installer Unifi Controller sur Ubuntu 20.04. Cet utilitaire est nécessaire si vous avez un routeur Unifi et que vous souhaitez mettre en place plusieurs SSIDs et plusieurs VLANs.
 Attention l&amp;rsquo;installation de cet utilitaire va aussi installer un serveur MongoDB qui écoutera sur le port 27017
  Installation Ajouter le repo Ubiquiti et ajouter la clé GPG permettant de truster ce dernier.</description>
    </item>
    
    <item>
      <title>Smart contract development: coder un Swap sur Uniswap avec des data de prod</title>
      <link>https://leandeep.com/smart-contract-development-coder-un-swap-sur-uniswap-avec-des-data-de-prod/</link>
      <pubDate>Fri, 22 Oct 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/smart-contract-development-coder-un-swap-sur-uniswap-avec-des-data-de-prod/</guid>
      <description>Dans cet article nous allons voir comment réaliser un échange d&amp;rsquo;USDC avec de l&amp;rsquo;USDT en codant un smart contract qui utiliser Uniswap.
 Pour cet example, j&amp;rsquo;ai utilisé Node version: nvm use v14.17.6. J&amp;rsquo;ai aussi installé les modules NodeJS ganache-cli et truffle
  Création du Smart contract Créer un fichier SimpleUniswapSwap.sol dans le répertoire contracts de votre repo git et ajouter le contenu suivant:
// SPDX-License-Identifier: MIT pragma solidity ^0.</description>
    </item>
    
    <item>
      <title>Réaliser un speed test depuis le terminal</title>
      <link>https://leandeep.com/r%C3%A9aliser-un-speed-test-depuis-le-terminal/</link>
      <pubDate>Sun, 10 Oct 2021 15:25:00 +0000</pubDate>
      
      <guid>https://leandeep.com/r%C3%A9aliser-un-speed-test-depuis-le-terminal/</guid>
      <description>J&amp;rsquo;ai eu besoin de mettre en place un traffic shaper sur mon Firewall pour ne pas qu&amp;rsquo;un de mes noeuds Ethereum consomme toute la bande passante de mon réseau. Je voulais limiter la bande passante en semaine de 8h30 à 19h. Une fois tout cela mis en place, il m&amp;rsquo;a fallu tester si tout était bien configuré. Si vous avez besoin de réaliser un speed test depuis un serveur headless, vous pouvez suivre ce tip.</description>
    </item>
    
    <item>
      <title>Sécurité domestique - Pentester son portail électrique, sonnette sans fil et porte de garage automatique</title>
      <link>https://leandeep.com/s%C3%A9curit%C3%A9-domestique-pentester-son-portail-%C3%A9lectrique-sonnette-sans-fil-et-porte-de-garage-automatique/</link>
      <pubDate>Mon, 04 Oct 2021 06:47:00 +0200</pubDate>
      
      <guid>https://leandeep.com/s%C3%A9curit%C3%A9-domestique-pentester-son-portail-%C3%A9lectrique-sonnette-sans-fil-et-porte-de-garage-automatique/</guid>
      <description>Introduction Je vous présente dans cet article le résultat d&amp;rsquo;un test de pénétration que j&amp;rsquo;ai réalisé sur des équipements de mon domicile. J&amp;rsquo;ai testé la sécurité d&amp;rsquo;une prise électrique sans fil que j&amp;rsquo;ai acheté chez un grand distributeur et ma porte de garage. Le résultat est saisissant, j&amp;rsquo;ai pu en quelques minutes enregistrer et rejouer les signaux émis par ces deux équipements. On pouvait s&amp;rsquo;en douter en voyant les films d&amp;rsquo;espionnage, mais il y a donc de gros problèmes de sécurité dans les objets contrôlés par des ondes RF et pour une porte de garage, c&amp;rsquo;est très grave.</description>
    </item>
    
    <item>
      <title>Architecture applicative d&#39;une application AR Copy Paste</title>
      <link>https://leandeep.com/architecture-applicative-dune-application-ar-copy-paste/</link>
      <pubDate>Wed, 29 Sep 2021 06:47:00 +0200</pubDate>
      
      <guid>https://leandeep.com/architecture-applicative-dune-application-ar-copy-paste/</guid>
      <description>Introduction Peut-être êtes-vous tombé sur cette vidéo qui a fait le buzz sur Linkedin où l&amp;rsquo;on voyait une app mobile prendre une photo de n&amp;rsquo;importe quel objet, le détourait automatiquement et l&amp;rsquo;envoyait sur Photoshop. Le concept est appelé &amp;ldquo;AR Copy Paste&amp;rdquo;. Voici un article dédié au concept
J&amp;rsquo;ai été très impressionné par la démo et me suis demandé comment c&amp;rsquo;était fait. J&amp;rsquo;ai donc codé un MVP qui refait exactement la même chose (au delta près du plugin Photoshop qui n&amp;rsquo;est qu&amp;rsquo;un wrapper autour de mon app web qui affichait déjà mon image détourée).</description>
    </item>
    
    <item>
      <title>Développement Solidity tuto 1 - Pragma</title>
      <link>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-1-pragma/</link>
      <pubDate>Fri, 10 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-1-pragma/</guid>
      <description>Les pragma permettent de spécifier la version du compiler pour Solidity
// SPDX-License-Identifier: MIT // La version doit être supérieure ou égale à 0.8.6 et inférieur à 0.9.0 pragma solidity ^0.8.6; contract HelloEthereum { string public greet = &amp;quot;Hello Solidity!&amp;quot;; } </description>
    </item>
    
    <item>
      <title>Développement Solidity tuto 2 - Contrat basique</title>
      <link>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-2-contrat-basique/</link>
      <pubDate>Fri, 10 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-2-contrat-basique/</guid>
      <description>Voici un exemple de smart contrat simple qui incrémente et décrémente le compteur count gardé en mémoire.
// SPDX-License-Identifier: MIT pragma solidity ^0.8.6; contract Counter { uint public count; // Fonction permettant d&#39;obtenir la valeur du compteur count function get() public view returns (uint) { return count; } // Fonction qui incrémente count par 1 function inc() public { count += 1; } // Fonction qui décrémente count par 1 function dec() public { count -= 1; } } </description>
    </item>
    
    <item>
      <title>Développement Solidity tuto 3 - Type de données primitifs</title>
      <link>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-3-type-de-donn%C3%A9es-primitifs/</link>
      <pubDate>Fri, 10 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9veloppement-solidity-tuto-3-type-de-donn%C3%A9es-primitifs/</guid>
      <description>Quelques types de primitifs:
 boolean uint int address  // SPDX-License-Identifier: MIT pragma solidity ^0.8.6; contract Primitives { bool public mon_bool = true; /* uint signifie unsigned integer, pour non negative integers Différente tailles sont disponibles uint8 varie de 0 à 2 ** 8 - 1 uint16 varie de 0 à 2 ** 16 - 1 ... uint256 varie de 0 à 2 ** 256 - 1 */ uint8 public u8 = 1; uint public u256 = 456; uint public u = 123; // uint est un alias pour uint256 /* Les nombres négatifs sont autorisés pour les types int.</description>
    </item>
    
    <item>
      <title>Switcher de Truffle Ganache à Hardhat</title>
      <link>https://leandeep.com/switcher-de-truffle-ganache-%C3%A0-hardhat/</link>
      <pubDate>Tue, 07 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/switcher-de-truffle-ganache-%C3%A0-hardhat/</guid>
      <description>Introduction Dans cet article nous allons voir comment utiliser Hardhat pour démarrer une blockchain locale (fork du réseau mainnet) et pour compiler et déployer son code Solidity. Nous verrons aussi comment avoir une explorer type etherscan local.
 Pré-requis  nvm Créer un compte ethernal sur https://app.tryethernal.com/ Compte alchemyapi (concurrent infura ou autre full node)   Installation nvm install v14.17.6 nvm use v14.17.6 nvm use default v14.17.6 npm install ethernal -g ethernal login npm install --save-dev hardhat npm i --save-dev hardhat-ethernal npm i --save-dev @nomiclabs/hardhat-waffle  Démarrer votre blockchain en local npx hardhat node --fork https://eth-mainnet.</description>
    </item>
    
    <item>
      <title>Pas assez de gaz pour développer sur Ethereum</title>
      <link>https://leandeep.com/pas-assez-de-gaz-pour-d%C3%A9velopper-sur-ethereum/</link>
      <pubDate>Mon, 06 Sep 2021 08:08:00 +0000</pubDate>
      
      <guid>https://leandeep.com/pas-assez-de-gaz-pour-d%C3%A9velopper-sur-ethereum/</guid>
      <description>Introduction Voici un tip pour éviter de devoir attendre 24h avant de pouvoir réclamer des Keth via les Faucets de Kovan. Sans cela, et lorsque vous avez brulé tout votre capital à force de tester sans cesse votre code, c&amp;rsquo;est très compliqué d&amp;rsquo;avancer et d&amp;rsquo;achever le développement de son smart contract Solidity (ou dApps web3). On perd du temps alors qu&amp;rsquo;on n&amp;rsquo;est même pas en prod&amp;hellip;
Ce tip permet de s&amp;rsquo;affranchir temporairement de l&amp;rsquo;erreur suivante: {&#39;code&#39;: -32010, &#39;message&#39;: &#39;Insufficient funds.</description>
    </item>
    
  </channel>
</rss>
