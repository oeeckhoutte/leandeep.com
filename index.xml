<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lean Deep Tech blog</title>
    <link>https://leandeep.com/</link>
    <description>Recent content on Lean Deep Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 12 Feb 2022 19:02:00 +0000</lastBuildDate><atom:link href="https://leandeep.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Développer sur iPad</title>
      <link>https://leandeep.com/d%C3%A9velopper-sur-ipad/</link>
      <pubDate>Sat, 12 Feb 2022 19:02:00 +0000</pubDate>
      
      <guid>https://leandeep.com/d%C3%A9velopper-sur-ipad/</guid>
      <description>Je ne rentrerais pas dans les détails de ce que je pense d&amp;rsquo;Apple et ses techniques Marketing douteuses pour pousser ses clients à la (sur)consommation. Je peux néanmoins toujours pas me passer du Macbook Pro et d&amp;rsquo;un iPad pour la qualité du matériel et surtout pour OSX et son interopérabilité avec les logiciels Enterprise de l&amp;rsquo;écosystème Microsoft (Office, Teams, etc). J&amp;rsquo;aurais préféré un Linux mais on est très loin du niveau d&amp;rsquo;OSX.</description>
    </item>
    
    <item>
      <title>Installation d&#39;Arch linux</title>
      <link>https://leandeep.com/installation-darch-linux/</link>
      <pubDate>Fri, 04 Feb 2022 06:34:00 +0000</pubDate>
      
      <guid>https://leandeep.com/installation-darch-linux/</guid>
      <description>Instroduction Dans cet article, nous allons voir comment installer Arch Linux de A à Z.
 Démarrage de l&amp;rsquo;installation Créer une clé usb de boot contenant l&amp;rsquo;ISO d&amp;rsquo;archlinux puis booter dessus (presser F10 généralement).
Sur le premier menu, sélectionner Arch Linux installation medium et appuyer sur entrer.
Vous arriverez ensuite sur un terminal zsh en mode root.
 Configuration le clavier loadkeys fr-pc  Voilà vous êtes maintenant en AZERTY. localectl list-keymaps pour voir les différents agencements du clavier FR disponibles.</description>
    </item>
    
    <item>
      <title>Aide mémoire types Rust</title>
      <link>https://leandeep.com/aide-m%C3%A9moire-types-rust/</link>
      <pubDate>Fri, 28 Jan 2022 07:00:00 +0200</pubDate>
      
      <guid>https://leandeep.com/aide-m%C3%A9moire-types-rust/</guid>
      <description>Literals Le type d&amp;rsquo;une variable peut être défini en ajoutant un suffixe derrière la valeur de la variable. Par exemple:
let mon_test1: i32 = 12; Equivaut à let mon_test2 = 12i32; Equivaut à let mon_test3 = 12_i32; Retourner la taille d&amp;rsquo;une variable:
println!(&amp;quot;Taille de `mon_test1` in bytes: {}&amp;quot;, std::mem::size_of_val(&amp;amp;mon_test1)); Taille de `mon_test1` in bytes: 4 // i32 -&amp;gt; 4 x 8  Casting  Il n&amp;rsquo;y a pas de coercion, c&amp;rsquo;est-à-dire de la conversion implicite, entre les types primitifs en Rust.</description>
    </item>
    
    <item>
      <title>Aide mémoire pour printer en Rust</title>
      <link>https://leandeep.com/aide-m%C3%A9moire-pour-printer-en-rust/</link>
      <pubDate>Sun, 16 Jan 2022 07:00:00 +0200</pubDate>
      
      <guid>https://leandeep.com/aide-m%C3%A9moire-pour-printer-en-rust/</guid>
      <description>Le print simple/ courant
println!(&amp;quot;{}, l&#39;origine&amp;quot;, 42);  Print avec des arguments positionnels
println!(&amp;quot;Hi {0}, I am {1}. Hi {1}, I am {0}&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;Peter&amp;quot;);  Print avec des arguments nommés
println!(&amp;quot;{argument1} {argument2} {argument3}&amp;quot;, argument2=&amp;quot;fifi&amp;quot;, argument1=&amp;quot;riri&amp;quot;, argument3=&amp;quot;loulou&amp;quot; );  Printer en alignant la variable à afficher à droite
println!(&amp;quot;{ma_variable:&amp;gt;width$}&amp;quot;, ma_variable=&amp;quot;toto&amp;quot;, width=10);  Printer en alignant à droite et en préfixant avec des zéros
println!(&amp;quot;{nombre:0&amp;gt;width$}&amp;quot;, nombre=100, width=6);  Printer avec une conversion automatique en binaire</description>
    </item>
    
    <item>
      <title>Aide mémoire primitives Rust</title>
      <link>https://leandeep.com/aide-m%C3%A9moire-primitives-rust/</link>
      <pubDate>Tue, 11 Jan 2022 07:00:00 +0200</pubDate>
      
      <guid>https://leandeep.com/aide-m%C3%A9moire-primitives-rust/</guid>
      <description>Annoter le type des variables
let is_rust_cool: bool = true; // let mon_float: f64 = 5.0; // Annotation simple // let mon_integer = 5i32; // Annotation via suffixe // Ou inférence de type: let mon_autre_float = 5.0; // f64 let mon_autre_integer = 5; // i32  Le type de variable ne peut pas être changé
  Tableau de taille fixe et type connu
let petit_tableau: [i8; 5] = [1, 2, 3, 4, 5];  Tableau de taille fixe, type connu et initialisé à 0</description>
    </item>
    
    <item>
      <title>Et vous quels sont vos projets pour 2022 ?</title>
      <link>https://leandeep.com/et-vous-quels-sont-vos-projets-pour-2022/</link>
      <pubDate>Tue, 04 Jan 2022 07:00:00 +0200</pubDate>
      
      <guid>https://leandeep.com/et-vous-quels-sont-vos-projets-pour-2022/</guid>
      <description>Chaque année, j&amp;rsquo;aime me fixer des objectifs professionnels en supplément de mon activité principale.
Voici donc mon programme pour l&amp;rsquo;année 2022 (beaucoup plus simple que l&amp;rsquo;annéee 2021). En gros cela se résume en 5 maîtres-mots: Blockchain, Rust, Trading, Veille Innovation.
 1. Utiliser Rust pour tous mes développements personnels (&amp;ldquo;développements professionels à usage personnel&amp;rdquo; devrais-je plutôt écrire) #TopPrio1
 Torrent client app (wrap C++ lib en Rust) expérimentation Secu app (sur Mobile device) Notification app (un socle très simple et utilisable via API call en local pour toutes mes automations) (gui natif OS X) Cross-platform expérimentation lib/app (lib Rust partagée sur Android et iOS, et/ou Flutter et/ou Webassembly) 2 Apps: voir les points 2.</description>
    </item>
    
    <item>
      <title>Installer un REPL Rust</title>
      <link>https://leandeep.com/installer-un-repl-rust/</link>
      <pubDate>Fri, 31 Dec 2021 06:34:00 +0000</pubDate>
      
      <guid>https://leandeep.com/installer-un-repl-rust/</guid>
      <description>Introduction Dans cet article, nous allons voir comment installer le REPL evcxr pour Rust développé par Google. Ce genre d&amp;rsquo;outil est très utile lorsque vous apprenez un langage (ou même quand vous êtes expérimenté et que vous voulez vérifier quelque chose). Avec evcxr, il n&amp;rsquo;est pas nécessaire de recompiler son programme Rust à chaque nouvelle commande exécutée. Ce REPL le fait tout seul; un gros gain de temps.
 Installation rustup component add rust-src cargo install evcxr_repl  Démarrage  Lien vers la documentation</description>
    </item>
    
    <item>
      <title>Tips en vrac sur Rust</title>
      <link>https://leandeep.com/tips-en-vrac-sur-rust/</link>
      <pubDate>Fri, 31 Dec 2021 06:34:00 +0000</pubDate>
      
      <guid>https://leandeep.com/tips-en-vrac-sur-rust/</guid>
      <description>Voir les &amp;ldquo;choses&amp;rdquo; chargées par défaut lors du démarrage d&amp;rsquo;un programme Rust
 &amp;ldquo;The prelude is the list of things that Rust automatically imports into every Rust program.&amp;rdquo; Source
 https://doc.rust-lang.org/std/prelude/v1/index.html
 Some()
Some est une variante de l&amp;rsquo;enum Option.
enum Option&amp;lt;T&amp;gt; { None, Some(T), } Si on veut parler d&amp;rsquo;une variable qui existe, on utilise Some(value). (Par contre, si on veut parler d&amp;rsquo;une variable qui pourrait ne pas exister, on utilise plutôt Option&amp;lt;IciAnyType&amp;gt;)</description>
    </item>
    
    <item>
      <title>Compresser un PDF gratuitement et en ligne de commande sur OSX</title>
      <link>https://leandeep.com/compresser-un-pdf-gratuitement-et-en-ligne-de-commande-sur-osx/</link>
      <pubDate>Wed, 29 Dec 2021 19:43:00 +0000</pubDate>
      
      <guid>https://leandeep.com/compresser-un-pdf-gratuitement-et-en-ligne-de-commande-sur-osx/</guid>
      <description>J&amp;rsquo;avais impérativement besoin de compresser un PDF et le faire passer 33Mo à 5 ou 6Mo max en gardant une qualité correcte.
Il y a pleins d&amp;rsquo;outils et d&amp;rsquo;articles sur internet expliquant comment faire cela et franchement c&amp;rsquo;est une perte de temps.
 Le compression intégrée directement dans Preview ne me donnait pas satisfaction car le rendu était flou.
  Ghostscript brew install ghostscript gs -sDEVICE=pdfwrite -dNOPAUSE -dQUIET -dBATCH -dPDFSETTINGS=/screen -dCompatibilityLevel=1.</description>
    </item>
    
    <item>
      <title>Workaround &#34;Object Capture is not available on this computer&#34; Photogrammetry</title>
      <link>https://leandeep.com/workaround-object-capture-is-not-available-on-this-computer-photogrammetry/</link>
      <pubDate>Fri, 24 Dec 2021 06:34:00 +0000</pubDate>
      
      <guid>https://leandeep.com/workaround-object-capture-is-not-available-on-this-computer-photogrammetry/</guid>
      <description>Introduction J&amp;rsquo;ai voulu expérimenter la nouvelle API disponible sur OSX Monterey appelée Object Capture qui permet de faire de la Photogrammetry. Mon objectif était de scanner des humains afin de créer leur avatar en 3D. Apple semble avoir un formidable nouvel outil pour faire de la photogrammetry et après avoir tout téléchargé, installé et analysé côté documentation je me suis pris cette erreur Object Capture is not available on this computer lorsque j&amp;rsquo;ai voulu RUN mon premier projet&amp;hellip;</description>
    </item>
    
  </channel>
</rss>
